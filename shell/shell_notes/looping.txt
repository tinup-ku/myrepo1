for loop works on a word at at time
while loop works on a line at a time

   ============

#!/bin/bash

# Initialize the counter
n=1
# Iterate the loop for 5 times
while [ $n -le 5 ]
do
    # Print the value of n in each iteration
    echo "Running $n time"
    # Increment the value of n by 1
    (( n++ ))
done

   ================
Loop with Break
#!/bin/bash

# Initialize the counter
n=1
# Iterate the loop for 10 times
while [ $n -le 10 ]
do
    # Check the value of n
    if [ $n == 6 ]
    then
        echo "terminated"      
        break
    fi
    # Print the current value of n
    echo "Position: $n"
    # Increment the value of n by 1
    (( n++ ))
done

   =====================

Example-1: Iterate the loop for a fixed number of times
Create a bash file named while1.sh with the following content. Here, the loop will iterate 5 times and print the counter value in each iteration.

#!/bin/bash

# Initialize the counter
n=1
# Iterate the loop for 5 times
while [ $n -le 5 ]
do
    # Print the value of n in each iteration
    echo "Running $n time"
    # Increment the value of n by 1
    (( n++ ))
done
Output:
The following output will appear after executing the above script.
     ====

Example-2: Using break statement for conditional exit
the break statement is used to exit from the loop early based on a particular condition. Create a bash file named while2.sh with the following code. Here, the loop is defined to iterate 10 times, but the iteration will be stopped when the counter value is 6.

#!/bin/bash

# Initialize the counter
n=1
# Iterate the loop for 10 times
while [ $n -le 10 ]
do
    # Check the value of n
    if [ $n == 6 ]
    then
        echo "terminated"      
        break
    fi
    # Print the current value of n
    echo "Position: $n"
    # Increment the value of n by 1
    (( n++ ))
done
Output:

The following output will appear after executing the above script.
      =====

Example-3: Using continue statement to omit particular step
Create a bash file named while3.sh with the following code. In this example, the loop will iterate for 5 times, but it will not print all 5 positions. When the loop iterates for the 3rd time, the continue statement will be executed, and the loop will go for the next iteration without printing the text of the 3rd position.

#!/bin/bash

# Initialize the counter
n=0
# Iterate the loop for 5 times
while [ $n -le 5 ]
do
    # Increment the value of n by 1
    (( n++ ))
   
    # Check the value of n
    if [ $n == 3 ]
    then
        continue
    fi
    # Print the current value of n
    echo "Position: $n"
   
done