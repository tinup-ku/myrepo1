
Add a  new line in clustering stanza

ssh host1 "cd /opt/splunk/etc/system/local;sed -i.BAK '/\[clustering/a rep_max_rcv_timeout = 300' server.conf"   

 =================
Relace in a stanza, any line in between [Test_App_Test_2] and cron_schedule..: ( update cron_schedule ) 
 sed '/\[Test_App_Test_2\]/,/^cron_schedule = 0.*$/ s/^cron_schedule = 0.*$/cron_schedule = 1-59 * * * */' data2
[Test_App_Test_2]
action.email.useNSSubject = 1
action.netcool.param.pageout = 0
action.summary_index = 1
action.summary_index._name = cam_summary
alert.track = 0
cron_schedule = 0 5 * * 0     - (replace with 1-59/5 * * * * )
dispatch.earliest_time = @w0
dispatch.latest_time = now

     ===================
replacing a line with new line which is in a variable ( use double quoute )
   sed -i "s/^MemoryLimit=.*/${mem_limit}/g" SplunkForwarder.service.new

      ===================
Remove duplicate lines (wihtout sorting the file):
   awk '!x[$0]++' <file-name>

Remove duplicate lines in file for a matching pattern: ( if xxxxxx is matched in lines )
     awk '!(/xxxxxx/ && seen[$0]++)' <file-name>

   ===========================
Script to append somestring after a line match:
SPLUNK_LOCAL=/opt/splunk/etc/system/local
cd ${SPLUNK_LOCAL} && {
  [[ -f server.conf ]] && {
    grep '^adhoc_searchhead' server.conf > /dev/null
    [[ "$?" != "0" ]] && sed -i '/\[shclustering/aadhoc_searchhead = true' server.conf
  }
}

desc: if pattern adhoc_searchhead is found then after matching "[shclustering" then append a line ( /a is for append ) adhoc_searchhead = true'
     =========================
seach and replace:
ssh host1 "sed -i 's/abc/xyz/g' /tmp/server.conf"
       =====================
Append to a file:
ssh host1 "cd /opt/splunk/etc/system/local;sed -i '$a\\n\[queue\]\nmaxSize=8MB\n' server.conf"
Appends below to server.conf:
[queue]
maxSize=8MB
$a => to append at the end of file
\n => newline

     =====================
Make the backup of server.conf as server.conf.BAK
delete the line which start with "captain_is_adhoc_searchhead"
And Replace: "conf_replication_include.passwd = true" by "conf_replication_include.passwd = false"
ssh host1 "cd /opt/splunk/etc/system/local;sed -i.BAK -e '/^captain_is_adhoc_searchhead/d' -e 's/conf_replication_include.passwd = true/conf_replication_include.passwd = false/g' server.conf"

         ========================
Delete splunk mount from fstab:
 "sed -i '/splunk/d' /etc/fstab.10042022"

      ====================================
Delete word anywhwere in the line: ( dot (.) can be any one char )
cat txt | sed 's/refresh="..."/d/g'

    =============================
FInd the line staring with "[settings]" and append "SSOMode = permissive"
ssh host "cd /opt/splunk/etc/system/local;sed -i \"/^\[settings/aSSOMode = permissive\" web.conf"
Before:
$ cat web.conf
[settings]
enableSplunkWebSSL = 0

After:
$ cat web.conf
[settings]
SSOMode = permissive
      =======================================
Other sed:
Replace a line when match found:
sed 's/^anothervalue=.*/replace=me/g' test.txt
    ==========================
Insert/Append a line after match found:
  sed '/^anothervalue=.*/a after=me' test.txt
  ======================
Insert/append a line before match found:
   sed '/^anothervalue=.*/i before=me' test.txt
  ========================
Insert/append multiple lines
sed '/^anothervalue=.*/i before=me\nbefore2=me2' test.txt
   ======================

Replace lines by adding leading and trailing string to comment it out
#!/bin/bash
# preserce the leading spaces for xml
OLD_IFS="$IFS"
IFS=
while read -r line ; do
    echo $line | grep -q '<refresh>'
   if [[ "$?" == "0" ]]  ; then
   echo "<!-- $line -->"
   else
    echo "$line"
  fi
done < txt.xml
IFS="$OLD_IFS"

     =====================
Append:
ssh host1 "cd /etc/systemd/system;sed -i -e '/^LimitNOFILE=262144/aLimitNPROC=131072' Splunkd.service"
Replace
ssh host1 "cd /etc/systemd/system;sed -i 's/LimitNOFILE=65536/LimitNOFILE=262144/g' Splunkd.service;systemctl daemon-reload"

  ===========================================================================================================
work on multiple files in a dir:
$ cat t.sh
#for f in `ls`
# do echo "$f"
# [[ -f $f ]] &&
# {
#    sed -i.BAk 's/users="user1*/users="user1,user2.user3"/g' $f
# }
#  done

#delete the duplicate lies in a file containing pattern "users_list-" and then compare with a bak copy
 for f in `ls  | egrep 'sho|sta|sto' | grep -v BAk`
  do
  [[ -f $f ]] &&
  {
  echo "=================================================="
  cp $f ${f}.bak1
  awk '!(/users_list=/ && seen[$0]++)' $f > ${f}.new
  mv ${f}.new ${f}
  diff $f ${f}.bak1
  }
  done
     ==============================================
