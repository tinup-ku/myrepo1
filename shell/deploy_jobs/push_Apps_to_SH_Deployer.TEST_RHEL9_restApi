#!/bin/bash
#      . Search Head Deployers
#        [cud1-014783/cud1-014780/ser10860some_loc]:/opt/splunk/etc/shcluster/apps
#
# 2. update_global, push new/updated Splunk Search Head core from
#    - https://bitbucketdomain1/scm/ad00203364/tos_splunk_core.git
#    to 
#    - DEV|QA [cud2-008139|cud1-008622]:/opt/splunk/etc/shcluster/apps/00-CORE-SH
#    - PROD 
#        . RestAPI SH Deployer(some_loc11-010964):/opt/splunk/etc/shcluster/apps/00-CORE-SH
#        . CORE SH Deployer(ser10860some_loc):/opt/splunk/etc/shcluster/apps/00-CORE-SH
#
# 3. update_perms, recursively change /opt/splunk/etc/shcluster/apps 
#    files/directories permission to 766 (rwxrw-rw-)
#
# 4. update_owner, recursively change UID:GID /opt/splunk/etc/shcluster/apps 
#    ownership to 
#    - DEV/QA: svc_act2:unx_60231_splunk_admin_dev
#    -   PROD: svc_act1:unx_9998_access
#
# 5. push_lookups (DEV/QA is optional) to push 
#    Source: New/updated Deployer's /opt/splunk/etc/shcluster/apps/*/lookups to
#    Destination: Splunnk Search Head members's /opt/splunk/etc/apps/SCH_*/lookups
#
# 6. push_bundle, run as Splunk AD service account:
#    DEV/QA: svc_act2
#    PROD: svc_act1 ),
#    LOCATION: /usr/local/bin/push_bundle
#    to push new/updated apps to all Search Head cluster members
#
#
# OUTPUTS:
# . /var/tmp/LOG/push_apps_to_SH_Deployer_[cud1-008622|cud2-008139|some_loc11-010964].${date_}.log
# . Salt job id status for each salt ID, '"result":${status}'
#   where
#   ${status} is "true" or otherwise 
#   will be reported, via, email 
#   Subject: "`uname -n`: `basename $0` Salt job result"
#   to ${users_list}
#
# . From CMA Portal
# 1. Login to https://cmaportaldomain1/ as ad.first.last 
# 2. Under Drop down, All Applications, choose AD00006311
# 3. In Minion Id, search for 
#    cud2-008139 (DEV SH Deployer), 
#    cud1-008622 (QA SH Deployer), or
#    some_loc11-010964 (PROD RestAPI SH Deployer)
# 4. In Actions Dropdown, click on Apply State
# 5. Under "Choose Group Repository:", click on
#    App_iaas_SERVICEASSURANCESERVICES_dev_AD00006311
# 6. Under "Choose file:", click on
#    app_iaas_serviceassuranceservices_dev/AD00006311_splunk_core/salt/states/deploy_shapps.sls for DEV/QA, or
#    app_iaas_serviceassuranceservices_prod.AD00006311_splunk_core.salt.states.deploy_shapps for PROD
#    Note, click on "View Source" to see state file .sls content
#    https://cmaportaldomain1/ajax/get_file/YXBwX2lhYXNfc2VydmljZWFzc3VyYW5jZXNlcnZpY2VzX3Byb2QvQUQwMDAwNjMxMV9zcGx1bmtfY29yZS9zYWx0L3N0YXRlcy9kZXBsb3lfc2hhcHBzLnNscw==
# 7. To test run, put a check mark on "Run as test/dry-run, no actual changes are made."
#    then click on "Apply State"
# 8. Otherwise, click on "Apply State". Job id will be shown below as an example.
#    Job executed with Job Id: 20211021204146060914
# Reference:
# https://confluencedomain1/display/SDIP/SALT+MANAGED+PLATFORM#SALTMANAGEDPLATFORM-CMAAPIDocumentation
# SH Cluster Deployer salt minion grains settings:
# ------------------------
# app_name        splunk
# environment     [qa|dev|prod]
# qa (cud1-008622); dev (cud2-008139); prod RestAPI SH Deployer (some_loc11-010964)
# splunk_function deployer
# splunk_group    core
# splunk_role     admin
# ------------------------
################################################################################
# Written by user1 | Team
#
date_=$(date '+%a%H%M_%m%d%Y')
LOG=/var/tmp/LOG/SHAPP
users_list="user1@mycorp.com,user2@mycorp.com,user3@mycorp.com,user4@mycorp.com,valerie.delossantos@mycorp.com,sylvia.castillo@mycorp.com"
bold_yellow="\e[1m\e[33m"
green=$(tput setaf 2)
red=$(tput setaf 1)
reset_color="\e[0m"

get_salt_settings ()
{
  
  case $1 in
           P|p )
                 X_Auth_Key="1bmhwKrNhsaCrevkGD96uyajGJ5OoJ6PXfdZDj7dK6Kswy9rN1Y5ix5s0Vdv9dG6ERms60fk3G8jBMpQVJfw2CNW2NnOX4IYbiNHF6HWxmaAqcJudymydb7Yb0fBBfGR"
                 X_Auth_Token="gXZHf9SYXoQYNllXs62VgmNf97nMtD6JB6rQfkOcIFaw0wtsCwoSTb82iwOMaVwL1XCghrs06Dw69ZzMwXFp9NsskheucLgeITu0kX0qAwxKw6x23csdZUFkcUPoF5Cn"
                 state_file="app_iaas_serviceassuranceservices_prod.AD00006311_splunk_core.salt.states.deploy_shapps"
                 module_functions="update_apps update_global update_perms update_owner push_lookups push_bundle"
                 ;;
       D|d|Q|q )
                 X_Auth_Key="Y3gJlZ661VTF1a9j6MHC0hQsgeReSkHk7ulf3RUKPIVYIybiJXixbjngtGSLb0bgOMrmFPG0OngD40sIizYRbKxmgWFOo4WGlC7R1XKdRhZy3xHV7eUxzltv9l4ibp0d"
                 X_Auth_Token="FaPQ1OopRJDsuseMNKaWlakwtu3ktfz9qpZreoR57uyCWNpKyzGTJ1pdwtxZJ699w9BKxsQEXohTbGEKfkDZm3cSwJSfQ1pma07HtYmqnDkzjYjzjWyF0KxwtqMkrcHB"
                 state_file="app_iaas_serviceassuranceservices_dev.AD00006311_splunk_core.salt.states.deploy_shapps"
                 module_functions="update_apps update_global update_perms update_owner push_bundle"
                 ;;
             * )
                 echo "Unknown option, $1. Abort"
                 exit
                 ;;
  esac
}

check_salt_jid_status ()
{
  echo "job_id=$1"

  # Checking various salt jid status
  # Output examples:
  # {"state": "running", "timer": 50, "minions": {"cud1-008622": "running"}}
  # {"state": "complete", "timer": 62, "minions": {"cud1-008622": "complete"}}
  # {"state": "complete", "timer": 3612, "minions": {"cud1-008622": "no data"}}
  while :
  do
    status=`{
              curl --location --request \
                   GET "https://cmaapidomain1/salt/job_status/$1" \
                   --header "X-Auth-Key: ${X_Auth_Key}" \
                   --header "X-Auth-Token: ${X_Auth_Token}" 
    } 2>/dev/null`

    echo
    #echo status=$status
    echo $status|grep "running" >/dev/null 2>&1
    if [[ "$?" = "0" ]]
    then
       #echo "jid $1 is still running."
       echo -n "Let's wait for 60 seconds... "
       rotate_char
       #echo
    else
       echo
       # {"state": "complete", "timer": 11396, "minions": {"cud1-008622": "complete"}}
       #echo "Checking jid $1 to make sure ${target} is in \"complete\" state"
       echo "$status"|awk 'BEGIN{RS="{"}{print}'|sed '/^$/d'|awk 'END{print}' \
       | grep ${target} |grep '"complete"}}' >/dev/null
       jid_status=$?

       if [[ "${jid_status}" != "0" ]]
       then
         echo
         echo "$status"
         echo "Waiting for jid $1 to complete for another 2 minutes."
         sleep 2m
       else 
         #echo "jid $1 Completed"
         #echo "$status"
         break
       fi
    fi
  done
}

run_test_job ()
{
  # Lock to prevent multiple runs
  if [[ -f ${LCK_file} ]]
  then
     echo "${LCK_file} indicates a salt job is currently running. Abort"
     exit
  else
     touch ${LCK_file}
     # Start test run to get salt jid
     # Example output: {"return": [{"jid": "20211020172204541253", "minions": []}]}
     echo "Pushing app from Bitbucket to ${env__} Search Head Cluster Deployer, ${target}."
     jid_test=`{
            curl --location --request POST 'https://cmaapidomain1/salt/apply_state' \
                 --header "X-Auth-Key: ${X_Auth_Key}" \
                 --header "X-Auth-Token: ${X_Auth_Token}" \
                 --header 'Content-Type: application/json' \
                 --data '[{
                            "target": "'"${target}"'",
                            "tgt_type": "list",
                            "file": "'"${state_file}"'",
                            "test": "true"
                          }]'
               } 2>/dev/null| awk '{print $3}'| sed -e 's/"//g' -e 's/,//g'` 
     export job_id=${jid_test}
     exec "$@"
     #echo "Salt job_id=$job_id"
  fi
}

run_actual_job ()
{
  # Lock to prevent multiple runs
  if [[ -f ${LCK_file} ]]
  then
     echo "${LCK_file} indicates a salt job is currently running. Abort"
     exit
  else
     touch ${LCK_file}
     echo
     echo "Pushing new/updated apps from Bitbucket to ${env__} Search Head Cluster Deployer, ${target}."
     # Insert run salt run job below
     jid=`{
            curl --location --request POST 'https://cmaapidomain1/salt/apply_state' \
                 --header "X-Auth-Key: ${X_Auth_Key}" \
                 --header "X-Auth-Token: ${X_Auth_Token}" \
                 --header 'Content-Type: application/json' \
                 --data '[{
                            "target": "'"${target}"'",
                            "tgt_type": "list",
                            "file": "'"${state_file}"'" 
                          }]'
     } 2>/dev/null| awk '{print $3}'| sed -e 's/"//g' -e 's/,//g'`
     # 2>/dev/null| awk '{print $3}'| sed -e 's/"//g;'s/,//g'`
     export job_id=${jid}
     exec "$@"
     #echo job_id=$job_id
  fi
}

usage ()
{
  cat<<END

Usage: $0 [[ -[E|e] [D|Q|P] -[U|u] [AD_first.last]  ]], or
       $0 [[ -[U|u] [AD_first.last] [[ -[E|e] [D|Q|P] ]]

Where: -E|-e  Search Head Cluster Deployer environment (DEV|QA|PROD_RestAPI)
       -U|-u  Active Directory username first.last

END
  exit 1
}

rotate_char() {
   chars=( '←' '↑' '→' '↓' )
   for sec in {1..60}
   do
     echo -ne "${green}${chars[i++ % ${#chars[@]}]}"
     sleep 1
     echo -ne "\b${reset_color}"
   done
}

set_env ()
{
   case ${env_} in
        D|d )
              #target=cud2-008139
              #target=cud1-014783
              #targets="cud2-008139 cud1-014783"
              #targets="cud1c-004761"
              targets="cud2c-005230"
              env__=DEV
              LCK_file=/tmp/`basename $0`_${env__}
              ;;
        Q|q )
              #target=cud1-008622
              #target=cud1-014780
              #targets="cud1-008622 cud1c-004769"
              #targets="cud1-008622 cud2c-005235"
              targets="cud1c-004769"
              env__=QA
              LCK_file=/tmp/`basename $0`_${env__}
              ;;
        P|p )
              # RestAPI some_loc11-010964
              # CORE ser10860some_loc
              targets="ser10860some_loc some_loc11-010964"
              LCK_file=/tmp/`basename $0`_${env__}
              ;;
          * )
              echo -en "Enter ${bold_yellow}D|d${reset_color}, or ${bold_yellow}Q|q${reset_color}, or ${bold_yellow}P|p${reset_color}. Try again."
              echo
              exit
              ;;
   esac
}

##########
# M A I N
##########
[[ ! -d ${LOG} ]] && mkdir -p ${LOG}
echo
echo "Pushing Search Head Apps from Bitbucket to Search Head Deployer."
if [[ "$#" = "0" ]]
then
   echo -en "Is it [${bold_yellow}D${reset_color}]EV, or [${bold_yellow}Q${reset_color}]A, or [${bold_yellow}P${reset_color}]ROD_RestAPI? "
   read env_
   set_env
   echo -en "Enter AD ${bold_yellow}first.last${reset_color}? "
   read ad_uid
else
   while [[ $# -le 4 ]]
   do
      case $1 in
                 -E|-e ) env_=$2
                         set_env
                         ;;
                 -U|-u ) ad_uid=$2
                         ;;
      esac

      case $3 in
                 -E|-e ) env_=$4
                         set_env
                         ;;
                 -U|-u ) ad_uid=$4
                         ;;
                      *)
                         break
      esac
      shift
   done
   [[ -z ${env_} ]] || [[ -z ${ad_uid} ]] && usage
fi
. /.splunk_|grep -Fx ${ad_uid} >/dev/null 2>&1
[[ "$?" != "0" ]] && echo "ERROR: ${ad_uid} is incorrect. Abort" && exit

get_salt_settings ${env_}

for target in ${targets}
do
   {
     ping -c 1 ${target}  >/dev/null 2>&1
     [[ "$?" != "0" ]] && {
       nc -vz ${target} 22 2>/dev/null 1>&2
       [[ "$?" != "0" ]] && {
          echo "ERROR: Search Head Cluster Deployer ${target} is down."
          exit
       }
     }

     echo "START: `date`"
     case ${target} in
          # DEV
          cud1-014783 ) env__=DEV_RestAPI
                        ;;
          cud1-014780 ) env__=QA_RestAPI
                        ;;
           ser10860some_loc ) env__=PROD
                        ;;
          some_loc11-010964 ) env__=PROD_RestAPI
                        ;;
     esac
     echo "Environment: ${env__}"
     echo "Username: ${ad_uid}"
     echo
     #run_test_job
     #check_salt_jid_status ${jid_test}

     run_actual_job
     check_salt_jid_status ${jid}
     date

     #echo "Sending actual job output, $jid, to "
     #echo "${LOG}/`basename $0`_${target}.${date_}.log"
     #echo
     {
      {
        curl --location --request GET "https://cmaapidomain1/salt/jobs/${jid}" \
             --header "X-Auth-Key: ${X_Auth_Key}" \
             --header "X-Auth-Token: ${X_Auth_Token}"
      } | jq
     } 2>/dev/null >> ${LOG}/`basename $0`_${target}.${date_}.log
   } | tee ${LOG}/`basename $0`_${target}.${date_}.log
   LOG_=${LOG}/`basename $0`_${target}.${date_}.log

   # Checking result from $LOG_
   # Obtain salt job id
   #echo "Checking result from $LOG_"
   job_id=`awk -F= '/^job_id/ {print $NF}' ${LOG_}`
   #echo job_id=$job_id
   {
     echo "Environment: ${env__}"
     echo "Username: ${ad_uid}"
     echo job_id=$job_id

     for salt_func in ${module_functions}
     do
       echo "${salt_func}:" 
       salt_f=`echo "sed -n '/-${salt_func}_/,/\"result\":/p'"`
       eval "${salt_f} ${LOG_}|tail -1"
     done
   } | mailx -s "`uname -n`: ${env__} SH Cluster Deployer ${target}:`basename $0` Salt job id result, ${job_id}." ${users_list}

   echo "END: `date`"
   rm -f ${LCK_file} >/dev/null 2>&1
done
