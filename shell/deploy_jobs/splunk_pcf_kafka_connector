#!/bin/bash
###############################################################################
# https://jiradomain1/browse/SED-468
# This script restarts or shows Kafka QA/PROD Kafka Connectors once changes 
# made in
# . pcf-org-name-splunk-index-config.json 
# . pcf-log-message-sourcetype-mapping-config.json
#
# References:
# - https://confluencedomain1/display/SDM/How+to+add+new+PCF+org+names+to+the+QA+Kafka+Connector#HowtoaddnewPCForgnamestotheQAKafkaConnector-Kafkafileslocationontheservers:
# - https://confluencedomain1/display/SDM/How+To+%3A+Kafka+Connector+-+PCF+Org+Names+Maintenance+Procedures
# - https://confluencedomain1/display/SDM/How+to+add+new+PCF+org+names+to+the+PROD+Kafka+Connector
# - https://confluencedomain1/display/SDM/How+to+add+new+PCF+org+names+to+the+QA+Kafka+Connector
# NOTE:
# . If this script needs to run on another server, make sure the server 
#   can connect to all servers defined in get_PROD_PCF_Kafka_Connector
#   function can be connected to Kafka port 8443. If not, need to submit 
#   a Firewall request
# . Check with Doug Frederickson/Ken Betts to make sure servers defined in
#   get_QA_PCF_Kafka_Connector and get_PROD_PCF_Kafka_Connector are current.
# . List of QA/PROD Kafka Connectors: ${LOCAL_BIN}:/kafka_connector.hostlist
#   Note, SDM Team will maintain kafka_connector.hostlist
# . Output: LOG=/var/tmp/LOG/Kafka_PCF
###############################################################################
# Written by user1 | S P L U N K Platform Engineering
#
bold_yellow="\e[1m\e[33m"
green=$(tput setaf 2)
red=$(tput setaf 1)
reset_color="\e[0m"
date_=$(date '+%a%H%M_%m%d%Y')
LOG=/var/tmp/LOG/Kafka_PCF
LOCAL_BIN=/usr/local/bin


[[ ! -d $LOG ]] && mkdir -p $LOG
[[ ! -f ${LOCAL_BIN}/kafka_connector.hostlist ]] && {
        echo "${LOCAL_BIN}/kafka_connector.hostlist doesnot exist. Abort"
        exit 1
}

show_connector_tasks ()
{
  curl --insecure https://${kafka_svc_acct}:${key}@${kafka_connector_server}:8443/connectors/${1}/status 2>/dev/null|jq '.[]' |grep '    "state"'

  num=`{
         curl --insecure https://${kafka_svc_acct}:${key}@${kafka_connector_server}:8443/connectors/${1}/status 2>/dev/null
       }|jq '.[]' |grep '    "state"'|wc -l`
  echo "Tasks RUNNING: $num"
}

restart_kafka_connector ()
{
  {
    curl -X POST --verbose --insecure https://${kafka_svc_acct}:${key}@${kafka_connector_server}:8443/connectors/$1/restart?includeTasks=true&onlyFailed=false
  } 2>/dev/null | grep ':"RESTARTING"' >/dev/null
  if [[ "$?" = "0" ]]
  then
     echo
     echo -e "${bold_yellow}$1${reset_color} RESTARTED"
  else
     echo
     echo -e "${bold_yellow}$1${reset_color} RESTART_FAILED"
     echo "Contact Splunk Platform Support Team."
     exit 1
 fi
}

{
eval `gpg --batch --xyz xyz -d /.splunk` >/dev/null 2>&1
} 2>/dev/null

show_pounds ()
{
  for num in `seq 1 $1`
  do
    echo -n "#"
  done
  echo
}


##########
# M A I N
##########
{
echo
while [ 1 ]
do
   echo -en "Is it ${bold_yellow}P${reset_color})ROD or ${bold_yellow}Q${reset_color})A  ${red}E${reset_color})xit? "
   read env_
   echo
   case ${env_} in
        P|p )
              env__=PROD
              kafka_svc_acct=svc.kafka_splunk_prd
              key=${kafka_prod}
              kafka_connector_server=`sed -n '/PROD_START/, /PROD_END/{/PROD_START/! {/PROD_END/! p}}' \
                                      ${LOCAL_BIN}/kafka_connector.hostlist|shuf -n1`
              ;;
        Q|q )
              env__=QA
              kafka_svc_acct=svc.splunk_kafka_dev
              key=${kafka_dev}
              kafka_connector_server=`sed -n '/QA_START/, /QA_END/{/QA_START/! {/QA_END/! p}}' \
                                      ${LOCAL_BIN}/kafka_connector.hostlist|shuf -n1`
              ;;
        E|e )
              echo "GoodBye."
              exit
              ;;
    esac

    echo -e "Below are ${bold_yellow}${env__}${reset_color} Enterprise Kafka Connectors showing in $kafka_connector_server"
    echo
    echo -e "${bold_yellow}------------------------------------------------"

    {
      curl --verbose --insecure https://${kafka_svc_acct}:${key}@${kafka_connector_server}:8443/connectors -X GET|jq '.[]'|sed 's/"//g'
    } 2>/dev/null
    echo -e "------------------------------------------------${reset_color}"
    echo

    echo -en "${bold_yellow}R${reset_color})estart or ${bold_yellow}S${reset_color})tatus? " 
    read ans
    case ${ans} in
         S | s )
                 echo -n "Enter Connector Name? "
                 read connector
                 num_chars=`echo $connector|wc -c`
                 num_chars=`expr ${num_chars} + 7`
                 show_pounds $num_chars
                 echo -e "${bold_yellow}${connector}${reset_color} Status:"
                 show_pounds $num_chars
                 show_connector_tasks ${connector}
                 ;;
         R | r )
                 echo -n "Enter Connector Name? "
                 read connector
                 echo -en "Restarting ${bold_yellow}${connector}${reset_color} (${green}Y${reset_color}|${red}N${reset_color})? "
                 read rsvp
                 case ${rsvp} in
                      Y|y ) 
                            restart_kafka_connector ${connector}
                            ;;
                      N|n )
                            continue
                            ;;
                        * )
                            echo "Enter Y|y|N|n. Goodbye."
                            exit
                            ;;
                 esac
               ;;
         * )
               echo "Incorrect option. Abort."
               exit
               ;;
    esac 
    echo
    echo -en "Continue (${green}Y${reset_color}|${red}N${reset_color})? "
    read ans_
    case ${ans_} in
         Y|y ) continue;;
           * ) echo "GoodBye."
               exit
    esac
done
} | tee $LOG/`basename $0`.${date_}.OUT
