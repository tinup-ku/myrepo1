#!/bin/bash
#################################################################################
# This script is to move files in /opt/syslog-ng for the following directories:
# ca-cem  f5  f5sec  f5system  Kiteworks  netcool  netscaler  unknown
#
# where all files have not updated for the past 300 minutes will be moved 
# From
# /opt/syslog-ng/${directories}/${files_not_modifed_for_the_past_5hrs}
# To
# /opt/syslog-ng/Archive/${directories}/${files_not_modifed_for_the_past_5hrs}
#
# This is recommended by Optiv:
# "In the case of Splunk, when logrotate runs it actually stops the syslog-ng 
# process and starts the syslog-ng process to release the files and begin a new 
# log file. This action can cause loss of data. To prevent this from happening 
# the following two cron jobs will perform the same function without stopping i
# the process."
# https://www.splunk.com/en_us/blog/tips-and-tricks/high-performance-syslogging-for-splunk-using-syslog-ng-part-1.html
# https://www.splunk.com/en_us/blog/tips-and-tricks/high-performance-syslogging-for-splunk-using-syslog-ng-part-2.html
# Daily cronjob:
# Cron job 1 â€“ run at 5 am, or any slack time during the process cycle:
# 0 4 * * * /usr/local/bin/clean_syslog-ng_Archive
# 0 5 * * * /usr/local/bin/clean_syslog-ng 
#################################################################################
# Written by user1 | T O S Splunk Platform
SYSLOG_NG=/opt/syslog-ng
ARCHIVE=/opt/syslog-ng/Archive
{
echo "START: `date`"
cd ${SYSLOG_NG} && {
# Get a list of directories except Archive
dir_=`find .  -maxdepth 1 -type d  -path ./Archive -prune -o -print|sed -e 's/\.\///g' -e 's/\.//g'`

for dir in ${dir_}
do
  echo "####### $dir #######"
  # Find files from the list which have not been mofified for 300 mins or 5 hrs.
  list_of_files=`find $dir -type f  ! -mmin -300 -print`
  list_compressed_files=`find $dir -type f -name "*.gz" -print`
  for old_file in ${list_of_files} ${list_compressed_files}
  do
    old_file_dir=${old_file%/*}
    [[ ! -d ${ARCHIVE}/${old_file_dir} ]] && {
        echo "Creating ${ARCHIVE}/${old_file_dir}"
        mkdir -p ${ARCHIVE}/${old_file_dir}
    } 
    # Copy file to Archive/${old_file_dir}
    echo "Moving $old_file ${ARCHIVE}/${old_file_dir}"
    [[ -f $old_file ]] && {
       cp -pf $old_file ${ARCHIVE}/${old_file_dir}
       [[ "$?" = "0" ]] && rm -f $old_file
       [[ -f ${ARCHIVE}/$old_file ]] && gzip ${ARCHIVE}/$old_file 2>/dev/null
    }
  done
done
}
echo "END: `date`"
} >> /var/tmp/`basename $0`.out


