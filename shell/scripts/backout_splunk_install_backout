#!/bin/bash
################################################################################
# This script backs out current installed splunk version to its previous.
# Output: /var/tmp/splunk${current_version_no}_backout.out
################################################################################
# user_ | mycorp Data Intelligence
date_=`date '+%Y%m%d'`
YUM_REPO=/etc/yum.repos.d/
current_version=`rpm -q splunk`
current_version_no=`echo ${current_version} |awk -F"-" '{print $2}'`
repo_url='http://s01638pdv.dev.mycorp.com/splunk/repos'

usage ()
{
cat<<END

Usage: $0 [ -v version_number ]

Where: -v version to backout 

END
exit 1
}

# Is Splunk running as a service account or root/splunk?
cd /opt/splunk  && {
  pre_uid=`ls -ld etc|awk '{print $3}'`
  pre_gid=`ls -ld etc|awk '{print $4}'`
  }

echo "uid=$pre_uid  gid=$pre_gid"

convert_to_service_account ()
{
  # Convert splunk to service account
  echo 
  echo "Convert /opt/splunk to service account: ${pre_uid}:${pre_gid}"
  echo 

  [ -d /opt/splunk ] && \
  cd /opt && chown -R ${pre_uid}:${pre_gid}  splunk

  # Remove local splunk entry.
  sed -i '/^splunk/d' /etc/passwd /etc/group /etc/shadow /etc/gshadow

  chmod 500 /opt/splunk/bin/splunk
  chmod u+s /opt/splunk/bin/splunk
}

check_splunk_repo ()
{
  echo "Download Splunk ${ver}.repo ...."
  wget -O /etc/yum.repos.d/splunk${ver}.repo ${repo_url}/splunk${ver}.repo
  if [[ "$?" = "0" ]]
  then
     # Check .repo version compared to ${ver}
     grep "${ver}" /etc/yum.repos.d/splunk${ver}.repo 2>/dev/null
     [[ "$?" != "0" ]] && {
        echo "${ver} doesnot match with /etc/yum.repos.d/splunk${ver}.repo"
        exit
     }
  else
     echo "Failed to get /etc/yum.repos.d/splunk${ver}.repo. Abort!"
     exit
  fi
}

#########
# M A I N
#########
if [[ ! $1 ]]
then
  echo -n "Enter Splunk version (ie, 6.5.2) to backout? "
  read ver
else
   while [[ $# -gt 0 ]]
   do
     case $1 in
        -v ) ver=$2
             shift
             ;;
      -*|* )
             usage
             ;;
     esac
     shift
   done
fi

{
check_splunk_repo
if [[ "${current_version_no}" != "${ver}" ]]
then
   # Stop Splunk
   splunk_status=`show_splunk|awk '/SPLUNK/{print $NF}'`
   echo splunk_status=$splunk_status
   [[ "${splunk_status}" = "UP" ]] && service splunk stop
  
   # Make sure splunk is DOWN
   status=`show_splunk|awk '/SPLUNK/{print $NF}'`
   if [[ "${status}" = "DOWN" ]]
   then
      ps aux|grep [s]plunk >/dev/null
      status=$?
      [[ "$status" != "0" ]] && {
         echo "Splunk is still UP. Backout to Splunk ${ver} Aborted."
         exit 1
      }

      # Check .repo version compared to ${ver}
      grep "${ver}" /etc/yum.repos.d/splunk${ver}.repo 2>/dev/null
      [[ "$?" != "0" ]] && {
            echo "${ver} doesnot match with /etc/yum.repos.d/splunk${ver}.repo"
            exit
      }

      # Verify
      if [[ -f /etc/yum.repos.d/splunk${ver}.repo ]]
      then 
         # Rollback to Splunk ${ver} ....
         # Remove current splunk.latest.repo
         [[ -f /etc/yum.repos.d/splunk.latest.repo ]] && \
            /bin/rm -f /etc/yum.repos.d/splunk.latest.repo

         [[ -f /etc/yum.repos.d/splunk${current_version_no}.repo ]] && \
            /bin/rm -f /etc/yum.repos.d/splunk${current_version_no}.repo

         # Rename current /opt/splunk/etc
         echo "Rename current /opt/splunk/etc to etc_DELETE_AFTER_3_DAYS.${current_version}"
         cd /opt/splunk && /bin/mv -f etc etc_DELETE_AFTER_3_DAYS.${current_version}
         
         # Downgrade splunk 
         echo
         echo "Downgrade splunk ${current_version} to ${ver}"
         os-update -y downgrade splunk

         # Restore Splunk${ver} configuration...
         echo
         echo "Restore Splunk${ver} configuration"
         cd /opt/splunk && {
            if [[ -f etc-splunk-${ver}.tar.gz ]]
            then
               tar xzvpf etc-splunk-${ver}.tar.gz
            else
               echo "/opt/splunk/etc-splunk-${ver}.tar.gz doesnot exist. Abort!"
            fi
         }

         # Check splunk's uid. If service account, convert
         cd /opt/splunk/bin  && post_uid=`ls -ld splunkd|awk '{print $3}'`

         [[ "${post_uid}" != "${pre_uid}" ]]  && convert_to_service_account

         ## Start Splunk....
         if [[ "${pre_uid}" = "ser_act.prod" ]] || \
            [[ "${pre_uid}" = "ser_act.dev" ]]
         then
             echo "Running su - ${pre_uid} -c '/opt/splunk/bin/splunk start --answer-yes --no-prompt --accept-license'"
             su - ${pre_uid} -c '/opt/splunk/bin/splunk start --answer-yes --no-prompt --accept-license'
         else
             echo "Running /opt/splunk/bin/splunk start --answer-yes --no-prompt --accept-license"
             /opt/splunk/bin/splunk start --answer-yes --no-prompt --accept-license
         fi

      else
         echo "/etc/yum.repos.d/splunk${ver}.repo doesnot exist. Abort!"
         exit
      fi
   fi
else
   echo
   echo "${current_version_no} is already installed: ${current_version}"
   exit
fi

## Make sure Splunk is up....
show_splunk -s
} | tee /var/tmp/splunk${current_version_no}_backout.out
