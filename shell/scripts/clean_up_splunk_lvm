#!/bin/bash
# Procedure to add/expand 2x1.5TB SSDs to /opt/splunkindexhot_data 
# Current Virtual Disks on Index Cluster Peers
#----------------------------------------------------------
#DG/VD TYPE  State Access Consist Cache sCC      Size Name
#----------------------------------------------------------
#0/0   RAID1 Optl  RW     Yes     NRWBD -    223.0 GB sda
#1/2   RAID1 Optl  RW     Yes     NRWBD -    1.454 TB sdc
#2/1   RAID5 Optl  RW     Yes     RWBD  -   14.731 TB
#----------------------------------------------------------
# This is the works on adding virtual SSD (v2) and changing from RAID1 to RAID6 
# LVM information 
# Volume Group: hotvg 
# Logical Volume: hot_lvm1 
# Virtual Physical Drive: /dev/sdc1 
# TOPOLOGY :
#-------------------------------------------------------------------------
#DG Arr Row EID:Slot DID Type  State BT      Size PDC  PI SED DS3  FSpace
#-------------------------------------------------------------------------
# 1 0   0   32:0     0   DRIVE Onln  N   1.454 TB dflt N  N   dflt -
# 1 0   1   32:1     1   DRIVE Onln  N   1.454 TB dflt N  N   dflt -
#
# New SSDs will be added to slot 13 and 14
# 1 0   0   32:13     0   DRIVE Onln  N   1.454 TB dflt N  N   dflt -
# 1 0   1   32:14     1   DRIVE Onln  N   1.454 TB dflt N  N   dflt -

# By user1 P. user1 | TOS
SPLUNK_HOT=/opt/splunkindexhot_data
SPLUNK_COLD=/opt/splunkindex_data
SSD_BACKUP=${SPLUNK_COLD}/SSD_BACKUP
date_=`date '+%Y%m%d'`

{

#[[ ! -d $SSD_BACKUP ]] && mkdir -p $SSD_BACKUP

# 1. Stop Splunk
# service splunk stop

# Identify LVM for SSD
pv=`pvs|grep hotvg|awk '{print $1}'`
lv=`lvs|grep hotvg|awk '{print $1}'`
vd_size=`pvs|awk '/hotvg/{print $5}'`
vd_size=${vd_size%.*}

echo "Unmount /opt/splunkindexhot_data"
umount /opt/splunkindexhot_data

echo "Unmount /opt/splunkindex_data"
umount /opt/splunkindex_data
# 3. Unmount $SPLUNK_HOT and remove its current RAID configuration 
grep '/opt/splunkindexhot_data' /proc/mounts >/dev/null
if [[ "$?" != "0" ]]
then
   # Remove LVM: hot_lvm1, hotvg, and 
   lvs|grep hot_lvm1 >/dev/null
   if [[ "$?" = "0" ]]
   then
      echo "Removing Logical Volume: hot_lvm1"
      # dmsetup ls
      dmsetup ls|grep hotvg-hot_lvm1
      if [[ "$?" = "0" ]]
      then
         dmsetup remove hotvg-hot_lvm1
      fi
      
      # Deactivate ${lv}
      lvchange -v -an hotvg/${lv}
      lvremove -f hotvg/${lv}

      lvs|grep "${lv}" >/dev/null
      # If found none
      if [[ "$?" != "0" ]]
      then
         echo "Removing Volume Group: hotvg"
         vgremove -f hotvg
         vgs|grep hotvg
         # If found none
         if [[ "$?" != "0" ]]
         then
            echo "Removing Physical Volume: ${pv}"
            pvremove -ff ${pv}
            pvs|grep "${pv}"
            # If found, abort.
            if [[ "$?" = "0" ]]
            then
               echo "Failed to remove Physical Volume, ${pv}. Abort."
               exit 4
            fi 
         else
            echo "Failed to remove Volume Group, hotvg. Abort"
            exit 3
         fi
      else
         echo "Failed to remove LVM ${lv}. Abort."
         exit 2
      fi

      # Cleanup perccli virtual drive
      echo "Below is the hotvg virtual drive (1.454 TB) needs to be deleted:"
      echo
      perccli /c0/vall show|egrep 'RAID5|RAID6'
      echo
      vd_number=`perccli /c0/vall show|grep '2.909'|awk '{print $1}'`
      vd_number=${vd_number##*/}
      echo
      echo "Delete virtual drive: v${vd_number}"
      echo
      echo "Remove v${vd_number}.  "
      # Now remove it
      echo "perccli /c0/v${vd_number} del force"
      perccli /c0/v${vd_number} del force
      echo "Done"

      vd_number=`perccli /c0/vall show|grep '14.731'|awk '{print $1}'`
      vd_number=${vd_number##*/}
      echo
      echo "Delete virtual drive: v${vd_number}"
      echo
      echo "Remove v${vd_number}.  "
      # Now remove it
      echo "perccli /c0/v${vd_number} del force"
      perccli /c0/v${vd_number} del force
      echo "Done"

      # Verify
      echo "Verify:"
      echo
      perccli /c0/vall show
      echo
      echo "Clean up /opt/splunkindexhot_data + /opt/splunkindex_data in /etc/fstab"
      sed -i '/splunkindex/d' /etc/fstab
   else
      echo
      echo "LVM: Logical Volume hot_lvm1 does not exist. Abort"
      exit 4
   fi
else
   echo "/opt/splunkindexhot_data is still mounting. Abort."
   exit 3
fi
} | tee  `basename $0`.${date_}.OUT 
