#!/bin/bash
#####################################################################################
# https://docs.splunk.com/Documentation/Splunk/8.1.5/DistSearch/Staticcaptain
#
#1. Check if cluster’s dynamic is 0 or 1
#   /opt/splunk/bin/splunk show shcluster-status
#
#   If 1, ask to convert to static
#   If 0, ask to convert to dynamic
# 
# For Static Captaincy.
#2. Identify captain, then
#   For example:
#   /opt/splunk/bin/splunk edit shcluster-config -mode captain -captain_uri https://ser11593pdv.dev.mycorp.com:8089 -election false
#
#   Then confirm via local server.conf’s [shclustering] stanza
#
#   captain_uri = https://ser11593pdv.dev.mycorp.com:8089
#   election = 0
#   mode = captain
#
#3. On each search heads,
#   For example: on ser11594pdv and ser11595pdv
#   /opt/splunk/bin/splunk edit shcluster-config -mode member -captain_uri https://ser11594pdv.dev.mycorp.com:8089 -election false
#   /opt/splunk/bin/splunk edit shcluster-config -mode member -captain_uri https://ser11595pdv.dev.mycorp.com:8089 -election false
#            
#   Verify via local server.conf’s [shclustering] stanza
#
#   captain_uri = https://ser11593pdv.dev.mycorp.com:8089
#   election = 0
#   mode = member
#
#4. Verify cluster status via `
#   $ /opt/splunk/bin/splunk show shcluster-status
#
#   Captain:
#   dynamic_captain : 1 (dynamic)
#
########################
# For Static Captaincy.
########################
#####################################################################################
#1.	Start with search peers first
#ser11594pdv:
#$ /opt/splunk/bin/splunk edit shcluster-config -election true -mgmt_uri https://ser11594pdv.dev.mycorp.com:8089
#The shcluster-config property has been edited.
# Verifying server.conf
# captain_uri = https://ser11593pdv.dev.mycorp.com:8089
# election = 1
# mode = member
 
# ser11595pdv:
#$ /opt/splunk/bin/splunk edit shcluster-config -election true -mgmt_uri https://ser11595pdv.dev.mycorp.com:8089
#The shcluster-config property has been edited.
 
# Verifying server.conf
#[shclustering]
#captain_uri = https://ser11593pdv.dev.mycorp.com:8089
#election = 1
#mode = member
 
#2.And lastly, Captain ser11593pdv:
#$  /opt/splunk/bin/splunk edit shcluster-config -election true -mgmt_uri https://ser11593pdv.dev.mycorp.com:8089
#The shcluster-config property has been edited.
 
# Verifying server.conf
#[shclustering]
#captain_uri = https://ser11593pdv.dev.mycorp.com:8089
#election = 1
#mode = captain
 
 
#3.Now, bring up ser11594pdv (or any search peer w/in the cluster) and bootstrap as captain:
 
#$ /opt/splunk/bin/splunk bootstrap shcluster-captain -servers_list "https://ser11593pdv.dev.mycorp.com:8089,https://ser11595pdv.dev.mycorp.com:8089"
#Successfully bootstrapped this node as the captain with the given servers.
 
#Confirm ser11594pdv from other peer, ser11593pdv, that ser11594pdv is now captain and dynamic_captain : 1
#On ser11593pdv:
#$  /opt/splunk/bin/splunk show shcluster-status
 
#Captain:
#                          dynamic_captain : 1
 
#NOTE: On all search peers’s server.conf
#1.	“election = 1” rather than “election = 0” when cluster in Captain static mode
#2.	“mode” in [shclustering] stays the same 
#For example, 
#•	On ser11593pdv, when it was a static server, mode = captain
#•	On ser11594pdv and ser11595pdv, mode = member
#It’s a good idea, to remove election and mode once SH cluster is reverted to its original dynamic captain state
#####################################################################################
SPLUNK_HOME=/opt/splunk
SPLUNK_BIN=${SPLUNK_HOME}/bin
SPLUNK_ETC=${SPLUNK_HOME}/etc
SPLUNK_LOCAL=${SPLUNK_ETC}/system/local
date_=$(date '+%a%H%M_%m%d%Y')
bold_yellow="\e[1m\e[33m"
reset_color="\e[0m"
bold=$(tput smso)
offbold=$(tput rmso)

{
eval `gpg --batch --xyz xyz -d /.splunk` >/dev/null 2>&1
} 2>/dev/null

{
echo
echo -e "This script configures SH cluster captaincy from ${bold}Dynamic${offbold}(${bold_yellow}1${reset_color}) to ${bold}Static${offbold}(${bold_yellow}0${reset_color}), and vice versa"
echo
echo -n "First, let me know a Search Head hostname? "
read search_head
env_=`echo $search_head|grep -o '...$'`


case ${env_} in
   pdv | bdv ) UID_=ser_act.dev
               key=${dev}
               ;;
   some_loc | loc2 | loc3 | loc4 ) UID_=ser_act.prod
               key=${prod}
               ;;
           * )
               case `uname -n` in
                   ser2* ) UID_=ser_act.prod
                          key=${prod}
                           ;;
                   cud*| cut* ) UID_=ser_act.dev
                                key=${dev}
                           ;;
               esac
               ;;               
esac

echo
echo "Below are SH cluster members"
echo "##########"
{
  ssh -q ${search_head} "su - ${UID_} -c \"${SPLUNK_BIN}/splunk list shcluster-members -auth admin:${key}|grep label\""
} 2>/dev/null |awk -F: '{print $NF}'
echo "##########"
  
# Search Head Cluster's Captain, is it Dynamic (1) or Static (0)?
echo "Checking SH cluster Captaincy status: Dynamic:(1) or Static:(0)"
dynamic_captain=`ssh -q ${search_head} "su - ${UID_} -c \"${SPLUNK_BIN}/splunk show shcluster-status -auth admin:${key}\"" 2>/dev/null|grep 'dynamic_captain'|awk '{print $NF}'`
if [[ $dynamic_captain = "1" ]]
then
  echo -e "SH Captaincy status=${bold}Dynamic${offbold}:${bold_yellow}$dynamic_captain${reset_color}"
else
  echo -e "SH Captaincy status=${bold}Static${offbold}:${bold_yellow}$dynamic_captain${reset_color}"
fi
echo
echo "Identifying Search Head captain..."
case ${dynamic_captain} in
    1 )
       # Identify captain
       captain=`ssh -q ${search_head} "su - ${UID_} -c \"${SPLUNK_BIN}/splunk list shcluster-members -auth admin:${key}\"" 2>/dev/null|grep -A1 'is_captain:1'|tail -1|awk -F: '{print $2}'`

       echo -n "Convert Cluster Captain, ${captain}, from Dynamic(1) to Static(0) [Y|N]? "
       read ans
       if [[ "${ans}" = "Y" || "${ans}" = "y" ]]
       then
          # Identify Search Head Cluster's Deployer url
          conf_deploy_fetch_url=`ssh -q ${search_head} "cd ${SPLUNK_LOCAL};grep '^conf_deploy_fetch_url' server.conf" 2>/dev/null|awk '{print $NF}'`

          #echo $conf_deploy_fetch_url

          # Identify all Search Head Cluster Members
          echo "Here are members including captain in the deployer ${conf_deploy_fetch_url}:"
          all_search_heads=`ssh -q ${search_head} "su - ${UID_} -c \"${SPLUNK_BIN}/splunk show shcluster-status -auth admin:${key}\"" 2>/dev/null|grep label|awk '{print $NF}'|sort|uniq` 
          echo all_search_heads=${all_search_heads}

          # Identify its captain
          captain=`ssh -q ${search_head} "su - ${UID_} -c \"${SPLUNK_BIN}/splunk list shcluster-members -auth admin:${key}\"" 2>/dev/null|grep -A1 'is_captain:1'|tail -1|awk -F: '{print $2}'`
          echo captain=$captain
          # On the captain, set "-mode captain" and "election false"
          ssh -q $captain "su - ${UID_} -c \"${SPLUNK_BIN}/splunk edit shcluster-config -mode captain -captain_uri https://${captain}:8089 -election false -auth admin:${key}\"" 2>/dev/null
          
          # verify if server.conf updated
          echo "Captain ${captain}:${SPLUNK_LOCAL}/server.conf updated."
          echo
          ssh -q $captain "cd ${SPLUNK_LOCAL};grep -A3 captain_uri server.conf" 2>/dev/null
          echo -n "Is the above as expected (Y/N)? "
          read ans_ 
          if [[ "${ans_}" = "Y" || "${ans_}" = "y" ]]
          then
             # chop off captain'sfqdn
             captain_=`echo ${captain}|awk -F. '{print $1}'`
             # Set remain search heads as member
             for node in ${all_search_heads}
             do
               echo
               echo "Modifying $node:${SPLUNK_LOCAL}/server.conf"
               [[ "${node}" != "${captain_}" ]] && {
                  ssh -q $node "su - ${UID_} -c \"${SPLUNK_BIN}/splunk edit shcluster-config -mode member -captain_uri https://${captain}:8089 -election false -auth admin:${key}\"" 2>/dev/null
               # Verify server.conf
               echo
               echo "Verifying ${node}:${SPLUNK_LOCAL}/server.conf"
               echo "--------------------------------"
               ssh -q $node "cd ${SPLUNK_LOCAL};grep -A3 captain_uri server.conf" 2>/dev/null
               echo "--------------------------------"
               echo
               }
             done
          else
             echo "Remove updated lines above from server.conf then restart splunk"
             echo "Abort."
             exit
          fi
       fi
       # Checking Cluster status
       echo "Checking cluster status via search head ${search_head}"
       ssh -q ${search_head} "su - ${UID_} -c \"${SPLUNK_BIN}/splunk show shcluster-status -auth admin:${key}\"" 2>/dev/null
       ;;
    0 )
       # Identify captain
       captain=`ssh -q ${search_head} "su - ${UID_} -c \"${SPLUNK_BIN}/splunk list shcluster-members -auth admin:${key}\"" 2>/dev/null|grep -A1 'is_captain:1'|tail -1|awk -F: '{print $2}'`

       echo -n "Convert Cluster Captain, $captain, from Static(0) to Dynamic(1) (Y/N)? "
       read ans
       if [[ "${ans}" = "Y" || "${ans}" = "y" ]]
       then
          # Identify all Search Head Cluster Members
          echo "Here are members including captain in the deployer ${conf_deploy_fetch_url}:"
          all_search_heads=`ssh -q ${search_head} "su - ${UID_} -c \"${SPLUNK_BIN}/splunk show shcluster-status -auth admin:${key}\"" 2>/dev/null|grep label|awk '{print $NF}'|sort|uniq`
          echo all_search_heads=${all_search_heads}

          # Identify its captain
          captain=`ssh -q ${search_head} "su - ${UID_} -c \"${SPLUNK_BIN}/splunk list shcluster-members -auth admin:${key}\"" 2>/dev/null|grep -A1 'is_captain:1'|tail -1|awk -F: '{print $2}'`
          echo captain=$captain
          # Start with search peers first 
          # chop off captain'sfqdn
          captain_=`echo ${captain}|awk -F. '{print $1}'`
          # Set remain search heads as member
          for node in ${all_search_heads}
          do
            echo
            echo "Modifying $node:${SPLUNK_LOCAL}/server.conf"
            [[ "${node}" != "${captain_}" ]] && {
               ssh -q $node "su - ${UID_} -c \"${SPLUNK_BIN}/splunk edit shcluster-config -election true -mgmt_uri https://${node}:8089 -auth admin:${key}\"" 2>/dev/null
               # Verify server.conf
               echo
               echo "Verifying ${node}:${SPLUNK_LOCAL}/server.conf"
               echo "--------------------------------"
               ssh -q $node "cd ${SPLUNK_LOCAL};grep -A3 captain_uri server.conf" 2>/dev/null
               echo "--------------------------------"
               echo
            }
          done
          # And lastly, the captain
          ssh -q ${captain_} "su - ${UID_} -c \"${SPLUNK_BIN}/splunk edit shcluster-config -election true -mgmt_uri https://${captain}:8089 -auth admin:${key}\"" 2>/dev/null
          # verify server.conf
          echo "Verify ${captain_}'s server.conf"
          echo "--------------------------------"
          ssh -q ${captain_} "cd ${SPLUNK_LOCAL};grep -A3 captain_uri server.conf" 2>/dev/null
          echo "--------------------------------"
          echo
         # Final step is to bootstrap captain on previous
         sh_list=""
         for sh in ${all_search_heads}
         do
           if [[ "${sh}" != "$captain_" ]]
           then
              sh_list="${sh_list},https://${sh}:8089"
           fi
         done
      
         sh_list=`echo ${sh_list}|sed 's/^,https/https/g'`
    
         # Bootstrapping ${captain_}
         echo " Bootstrapping ${captain_}"
         ssh -q ${captain_} "su - ${UID_} -c \"${SPLUNK_BIN}/splunk bootstrap shcluster-captain -servers_list \"${sh_list}\" -auth admin:${key}\"" >/dev/null
         sleep 2
         echo "Verifying cluster status..."
         ssh -q ${captain_} "su - ${UID_} -c \"${SPLUNK_BIN}/splunk show shcluster-status -auth admin:${key}\"" >/dev/null
        
       else
          echo "Remove updated lines above from server.conf then restart splunk"
          echo "Abort."
          exit
       fi
       ;;
esac
} | tee ./`basename $0`.${date_}.OUT
