#!/bin/bash
############################################################################
# This script performs failover/failback 
# . Production Search Head Deployer:
#   - Primary: splunkdeployer.mycorp.com (ser10860some_loc.some_loc.mycorp.com)
#   - Secondary (DR): ser10097loc2.some_loc.mycorp.com
# , or
#
# . Preprod Search Head Deployer:
#   - Primary: ser14744loc2.some_loc.mycorp.com
#   - Secondary (DR): ser10982some_loc.some_loc.mycorp.com
#
# NOTE:
# PREPRARATION:
# 1. On PROD/Preprod primary Deployer, setup cronjob push to DR ser10097loc2/ser10982some_loc
#    59 11 * * * (rsync -arv --delete ${PRIMARAY}:/opt/splunk/etc/shcluster/apps ${DR}:/opt/splunk/etc/shcluster/ 2>/dev/null ) >> /var/tmp/daily_pp_deployer.out 2>&1 
#
# 2. On DR PROD/Preprod ser10097loc2/ser10982some_loc, setup ${SPLUNK_LOCAL}/server.conf:
#    Example on preprod:
#    ----- cut here -----
#    [license]
#    master_uri = https://ser10966some_loc.some_loc.mycorp.com:8089
#    
#    [shclustering]
#    shcluster_label = preprod_shcluster
#    pass4SymmKey = preprodcluster
#    
#    ----- cut here -----
#
# IMPLEMENTATION:
# 3. On each Search Head in PROD or Preprod SH cluster, modify 
#    $SPLUNK_HOME/etc/system/local/server.conf's stanza
#    From:
#    [shclustering]
#    conf_deploy_fetch_url = https://${deployer}:8089
#
#    Where 
#     deployer= splunkdeployer.mycorp.com (PROD) or 
#               ser14744loc2.some_loc.mycorp.com (Preprod)
#
#    To:
#    [shclustering]
#    conf_deploy_fetch_url = https://${DR_Deployer}:8089
#
#    Where DR_Deployer= ser10097loc2.some_loc.mycorp.com (PROD) or 
#                       ser10982some_loc.some_loc.mycorp.com (Preprod)
#
# 4. Restart splunk on each search head via `stop_splunk;start_splunk`, or from any SH, 
#    ${SPLUNK_BIN}/splunk rolling-restart shcluster-members
# 
# OPTIONAL:
# Once failed over, if apps are added/updated,
#
# 5. On failover Deployer, as ser_act.prod
#    $SPLUNK_BIN/splunk apply shcluster-bundle -target https://${any_SH}:8089
#
# 6. For details, see http://docs.splunk.com/Documentation/Splunk/7.2.6/DistSearch/PropagateSHCconfigurationchanges#Consequence_and_remediation_of_deployer_failure
############################################################################
# By user1 P. user1 and user2 Llamado | T O S
#
SPLUNK_HOME=/opt/splunk
SPLUNK_BIN=$SPLUNK_HOME/bin
date_=$(date '+%F_%H%M')
bold_yellow="\e[1m\e[33m"
bold_green="\e[1m\e[32m"
reset_color="\e[0m"



usage ()
{
cat<<END

Usage: $0 [ [-P|-p]|[-E|-e] [-F|-f]|[-B|-b] ] 

Where:
       [-P|-p] Production SH Deployer
       [-PP|-pp] Preprod SH Deployer
       [-F|-f] Failover from ${PRIMARY} to ${SECONDARY}
       [-B|-b] Failback from ${SECONDARY} to ${PRIMARY}

END
exit 1
}


check_remote_host ()
{
bad_host=""
for node in $1
do
   ping -c 1 $node >/dev/null 2>&1
   [[ "$?" != "0" ]] && bad_host="${bad_host} $node"
done

[[ ! -z ${bad_host} ]] && {
     echo "Node Down | Incorrect hostname | Hostname not in DNS: ${bad_host}"
     exit 2
   }
}

get_env ()
{
case $1 in
   P|p )
        PROD_SH=`jldsh -eg splunk_multisite_SH echo|sed 's/://g'`
        PROD_SH=`echo $PROD_SH|sed 's/ /,/g'`
        PRIMARY=splunkdeployer.mycorp.com
        SECONDARY=ser10097loc2.some_loc.mycorp.com
        ;;
   PP|pp )
        PP_SearchHeads="ser14428some_loc,ser14343some_loc,ser14350some_loc,ser14352some_loc,ser14343loc2,ser14344loc2,ser14350loc2"
        PROD_SH=${PP_SearchHeads}
        PRIMARY=ser14744loc2.some_loc.mycorp.com
        SECONDARY=ser10982some_loc.some_loc.mycorp.com
        ;;
     * )
        echo "Undefined PROD_SH. Need to investigate."
        exit 3
        ;;
esac
}

##########
# M A I N
##########
#{
if [[ "$#" = "0" ]]
then
   echo -ne "Is this for ${bold_yellow}P${reset_color})ROD SH Deployer or ${bold_yellow}PP${reset_color})reprod SH Deployer? "
   read env_
   get_env ${env_}
   echo
   echo -e "${bold_yellow}F${reset_color})ailover from PDC1:${PRIMARY} to PDC3:${SECONDARY}, or"
   echo -e "Fail${bold_yellow}B${reset_color})ack from PDC3:${SECONDARY} to PDC3:${PRIMARY}"
   echo
   echo -ne "Enter option: (${bold_yellow}F${reset_color}/${bold_yellow}B${reset_color})? "
   read ans
   case $ans in
      F|f ) deployer=${SECONDARY}
            failover=true
            ;;
      B|b ) deployer=${PRIMARY}
            failover=false
            ;;
        * )
            usage
            ;;
   esac
else
   while [[ $# -gt 0 ]]
   do
     case $1 in
     -P|-p ) get_env P
             shift
             ;;
     -PP|-pp ) get_env PP
             shift
             ;;
     -F|-f ) deployer=${SECONDARY}
             failover=true
             shift
             ;;
     -B|-b ) deployer=${PRIMARY}
             failover=false
             shift
             ;;
      -*|* )
             usage
             ;;
     esac
     shift
   done
fi

check_remote_host $deployer

cat<<END

failover=$failover
PRIMARY=$PRIMARY
SECONDARY=$SECONDARY

Below Search Heads will point to ${SECONDARY}:
PROD_SH=$PROD_SH

END


if [[ "$failover" = "true" ]]
then
   echo "Failover Search Head Deployer, $PRIMARY, to its backup, ${SECONDARY}."
   echo
   # On each search head, make a copy of server.conf
   echo "[${PROD_SH}]:$SPLUNK_HOME/etc/system/local, copy server.conf to server.conf.PRIMARY"
   echo
   # Make a backup
   jldsh -ew ${PROD_SH} "cd ${SPLUNK_HOME}/etc/system/local; cp server.conf server.conf.PRIMARY" >/dev/null

   # On each search head's server.conf points deployer to ${SECONDARY}
   echo
   echo "[${PROD_SH}]:$SPLUNK_HOME/etc/system/local/server.conf, point to ${deployer}"
   echo
   jldsh -ew ${PROD_SH} "cd ${SPLUNK_HOME}/etc/system/local; sed -i.bak \"s/${PRIMARY}/${deployer}/g\" server.conf" >/dev/null
else
   # Failback from PDC3 --> PDC1
   echo
   echo "On ${PROD_SH}: Copy server.conf.PRIMARY --> server.conf"
   jldsh -ew ${PROD_SH} "cd ${SPLUNK_HOME}/etc/system/local;cp -f server.conf.PRIMARY server.conf" >/dev/null
   echo
fi


# Verify ${deployer}'s server.conf 
echo
echo "Below is server.conf's conf_deploy_fetch_url on each search head."
echo
jldsh -ew ${PROD_SH} "cd ${SPLUNK_HOME}/etc/system/local;grep '^conf_deploy_fetch_url' server.conf"
echo
status_flag=false
echo -n "Ready to restart splunk on ${PROD_SH}:(${bold_green}Y${reset_color}|${bold_green}N${reset_color})? "
read rsvp
case $rsvp in
      Y|y )
           for sh in `echo ${PROD_SH}|sed 's/,/ /g'`
           do
             echo "Restart splunk on $sh. Please wait"
             jldsh -ew $sh "stop_splunk;start_splunk"
             while [[ "$status_flag" = "false" ]]
             do
               sleep 2m
               # Verify splunk is UP
               splunk_status=`jldsh -ew $sh "show_splunk|grep SPLUNK"|awk '{print $NF}'`
               [[ "${splunk_status}" = "UP" ]] && status_flag=true
             done
           done
           ;;
        * )
           echo "You'll need to restart ${PROD_SH} one at a time, or"
           echo "\`${SPLUNK_BIN}/splunk rolling-restart shcluster-members\` from any of ${PROD_SH}"
           echo
           exit
           ;;
esac
} | tee /tmp/`basename $0`.${date_}.OUT
