#!/bin/bash
############################################################################
# This is check and clean if there's a lock file. This is needed to ensure 
# updated/new apps are pushed from bit bucket to Search Head Cluster
# Deployer, ser10860some_loc, cron job running
# 0 12,15,18,21 * * * (salt-run fileserver.update;salt 'prod_dep' state.apply prodapps;date) >> /srv/salt/LOG/salt-test.log
#
# Below is sample output from `systemctl status salt-master -l`:
#
#Feb 19 09:05:54 ser10968some_loc salt-master[1713]: [WARNING ] Update lock file is present for gitfs remote 'https://bitbucket.mycorp.com/scm/ad00203364/tos_splunk_core.git', skipping. If this warning persists, it is possible that the update process was interrupted, but the lock could also have been manually set. Removing /var/cache/salt/master/gitfs/ee6a3513c3a733e8ae7a1996f5ec60bf8c967731a0facd2ba0976094af3d062c/.git/update.lk or running 'salt-run cache.clear_git_lock gitfs type=update' will allow updates to continue for this remote.
#
# salt-run cache.clear_git_lock gitfs type=update
# Output:
#cleared:
#    - Removed update lock for gitfs remote 'https://bitbucket.mycorp.com/scm/ad00203364/tos_splunk_apps.git'
#    - Removed update lock for gitfs remote 'https://bitbucket.mycorp.com/scm/ad00203364/tos_splunk_core.git'
# Cronjob runs 5 minutes before the top of the hour salt-master job.
# 55 11,14,17,20 * * * check_n_clean_salt-master.lck
############################################################################
# Written by user1 | T O S Splunk Platform.
GITFS=/var/cache/salt/master/gitfs
users_list="user1@mycorp.com,user2@mycorp.com"
find_lock_files=`find $GITFS -type f -name update.lk`

# If there's none then no worries. Quit.
[[ -z "${find_lock_files}" ]] && exit

{
  for flock_file in ${find_lock_files}
  do
    systemctl status salt-master -l|tail -1|grep "$lock_file" >/dev/null
    [[ "$?" = "0" ]] && echo "clean up $flock_file"
  done

  systemctl status salt-master -l|tail -1|grep '\[WARNING \] Update lock file is present for gitfs' >/dev/null
  [[ "$?" = "0" ]] && {
    lock_file=`systemctl status salt-master -l|tail -1|awk '{print $41}'`
    echo
    echo "Removing lock file, ${lock_file}"
    salt-run cache.clear_git_lock gitfs type=update
    echo "Verifying lock file removed"
    salt-run cache.clear_git_lock gitfs type=update
    if [[ ! -f ${flock_file} ]]
    then
        echo "${flock_file} removed"
        echo
    else
        echo "Lock file not removed: ${flock_file}"
        echo "Force remove ${flock_file}"
        rm -f ${flock_file}
    fi
  }
} |  mailx -s "$(uname -n): Salt-master lock file clean up" ${users_list}
