#!/bin/bash
#######################################################################################
# This script copies all lookup files in Splunk Search Head Deployer
# https://splunk-restapi.mycorp.com
# $CLUSTER's All_RestAPI_SH_Deployer (Primary:ser21-010964/Backup:ser24-009735)
# ser21-010964 | ser24-009735 )
#                             F5_fqdn=splunk-restapi.mycorp.com
#                             ;;
# https://splunk.mycorp.com
# $CLUSTER's splunk_SH_Deployer (ser10860some_loc)/splunk_SH_Deployer_Backup(ser10097loc2)
#                ser10860some_loc )
#                             F5_fqdn=splunk-admin.mycorp.com
#                             ;;
#
# ${SH_Deployer}:/opt/splunk/etc/shcluster/apps/${app}/lookups/* which were pushed from
# Source:
# Salstack Master node, ser10968some_loc:/srv/salt/prodapps.sls, to
#
# Destination Search Head Cluster: ${SPLUNK_ETC}/apps/${SCH_apps}/lookups
# via salt state .sls
# # https://cmaportal.us.global.mycorp.com/ajax/get_file/YXBwX2lhYXNfc2VydmljZWFzc3VyYW5jZXNlcnZpY2VzX3Byb2QvQUQwMDAwNjMxMV9zcGx1bmtfY29yZS9zYWx0L3N0YXRlcy9kZXBsb3lfc2hhcHBzLnNscw==
#
# update_apps:
#  file.recurse:
#    - name: /opt/splunk/etc/shcluster/apps/
#    - source: salt://tos_splunk_apps/master/shcluster/search/apps/
#    - user: [ser_act.prod|ser_act.dev]
#    - group: [unx_9998_access|unx_60231_splunk_admin_dev]
#    - file_mode: 644
#    - clean: True
#
# Criteria to copy lookups to all SH peers:
# 1. hash value is different on source Deployer and Search Head
# 2. File modification time on source Deployer is newer than the search head.
#
# Steps:
# 1. Generate a list of all lookups in ${SH_Deployer}:/opt/splunk/etc/shcluster/apps
# 2. Identify Search Head Cluster captain via restAPI to F5 LB https://${F5_fqdn}:8089
# 3. For every lookup described in Steps in 1., compare with 2.. If criteria 1 and 2
#    are met then copy to all Search Heads peers: ${search_peers}
#
# OUTPUT: LOG=/root/LOOKUPS.LOG//`basename $0`.${date_}
#######################################################################################
# user_ | TOS - Platform Splunk <grp1@mycorp.com>

SPLUNK_APPS=/opt/splunk/etc/apps
SPLUNK_ETC=/opt/splunk/etc
SHCLUSTER=/opt/splunk/etc/shcluster/apps
LOG=/root/LOOKUPS.LOG
date_=$(date '+%F_%H%M')

[[ ! -d ${LOG} ]] && mkdir ${LOG}

get_captain ()
{
  get_key ${F5_fqdn} 2>/dev/null
  captain=`curl -k -u admin:${key} https://${F5_fqdn}:8089/services/shcluster/captain/info 2>/dev/null|grep "label"| awk -F'>' '{print $2}'|sed 's/<\/s:key//g'`

  [[ -z ${captain} ]] && {
     echo "Search Head Deployer $(uname -n): ${F5_fqdn} | captaincy unidentified. Abort."
     exit
  }
  search_peer=${captain}
}

get_search_peers ()
{
  search_peers=`{
  curl -k -u admin:${key} https://${captain}:8089/services/shcluster/captain/members|grep "mgmt_uri"
  } 2>/dev/null|sed -e 's/<s:key name="mgmt_uri">https:\/\///g' -e 's/:8089<\/s:key>//g'`

  [[ -z ${search_peers} ]] && {
     echo "Search Head Deployer $(uname -n): ${F5_fqdn} | Search Head members unidentified. Abort."
     exit
  }

  for sh_ in $search_peers
  do
    echo "${sh_}"
  done
  search_peers=$(echo ${search_peers}|sed 's/ /,/g')
}

get_key ()
{
  eval $(. /.splunk_)
  echo $1|grep 'dev' >/dev/null
  if [[ "$?" = "0" ]]
  then
    uid_gid="ser_act.dev:unx_60231_splunk_admin_dev"
    key=${dev}
  else
    uid_gid="ser_act.prod:unx_9998_access"
    key=${prod}
  fi
}

get_captain_apps_list ()
{
{
cat<<END | ssh ${search_peer} 2>/dev/null
cd ${SPLUNK_APPS}
find */lookups -type f | while read file
do
  echo -n "\`stat -c '%Y' \$file\` "
  sha1sum \$file
done
END
} > /tmp/${search_peer}.Modify_sha1sum.time
}

get_deployer_apps_list ()
{
  cd ${SHCLUSTER} && {
     {
       find */lookups -type f | \
       while read file
       do
         echo -n "`stat -c '%Y' $file` "
         sha1sum $file
       done
     } > /tmp/deployer.Modify_sha1sum.time
  }
}

update_SH_lookups ()
{
  echo ". Examining lookups timestamp and checksum on"
  echo "Source: Deployer $(uname -n):/tmp/deployer.Modify_sha1sum.time and"
  echo "Destination: SH captain ${captain}:/tmp/${search_peer}.Modify_sha1sum.time"
  echo
  echo ". Copying Deployer $(uname -n):${SHCLUSTER} new/updated lookups to All Search Head members:${SPLUNK_APPS}"
  echo
  cat /tmp/deployer.Modify_sha1sum.time|while read line
  do
    modify_deployer=`echo $line|awk '{print $1}'`
    sha1sum_deployer=`echo $line|awk '{print $2}'`
    file_deployer=`echo $line|awk '{print $NF}'`
    dir_=`dirname $file_deployer`
    file_d=`basename $file_deployer`
    # Check if $file_d exists
    grep "${file_d}" /tmp/${search_peer}.Modify_sha1sum.time >/dev/null
    if [[ "$?" = "0" ]]
    then
       # Check again
       new_file_deployer=`convert_string ${file_deployer}`
       grep "${new_file_deployer}" /tmp/${search_peer}.Modify_sha1sum.time >/dev/null
       [[ "$?" = "0" ]] && {
          line_sh=`grep "${new_file_deployer}" /tmp/${search_peer}.Modify_sha1sum.time`
          modify_sh=`echo ${line_sh}|awk '{print $1}'`
          sha1sum_sh=`echo ${line_sh}|awk '{print $2}'`
          dir_sh=`echo ${line_sh}|awk '{print $NF}'`

          # Check both modification time AND sha1sum
          [[ "${modify_deployer}" -gt "${modify_sh}" && "${sha1sum_deployer}" != "${sha1sum_sh}" ]] && {
             echo "jlpcp -ew ${search_peers} ${file_deployer} ${SPLUNK_APPS}/${file_deployer}"
             /usr/local/bin/jlpcp -ew ${search_peers} ${file_deployer} ${SPLUNK_APPS}/${file_deployer} >/dev/null
          }
       }
    else
       # Check if ${dir_} exist on ${search_peer}
       grep "${dir_}" /tmp/${search_peer}.Modify_sha1sum.time >/dev/null
       if [[ "$?" = "0" ]]
       then
          echo "jlpcp -ew ${search_peers} ${file_deployer} ${SPLUNK_APPS}/${file_deployer}"
          /usr/local/bin/jlpcp -ew ${search_peers} ${file_deployer} ${SPLUNK_APPS}/${file_deployer} >/dev/null
       else
          echo
          echo "${dir_} DOES_NOT_EXIST on SH Deployer $(uname -n):/tmp/${search_head}.Modify_sha1sum.time"
          echo
       fi
    fi
  done
}

convert_string ()
{
 echo $1|sed 's/\//\\\//g'
}

##########
# M A I N
##########
{
  case $(uname -n) in
  # $CLUSTER's All_RestAPI_SH_Deployer (Primary:ser21-010964/Backup:ser24-009735)
  ser21-010964 | ser24-009735 )
                              F5_fqdn=splunk-restapi.mycorp.com
                              ;;
  # $CLUSTER's splunk_SH_Deployer (ser10860some_loc)/splunk_SH_Deployer_Backup(ser10097loc2)
                 ser10860some_loc )
                              F5_fqdn=splunk-admin.mycorp.com
                              ;;
  esac

  echo "START: $(date)"
  echo "1. Identifying https://${F5_fqdn} captaincy:"
  get_captain
  echo "https://${F5_fqdn} SH captain: ${captain}"
  echo

  echo "2. Generating a list of https://${F5_fqdn} SH cluster members:"
  get_search_peers
  echo

  echo "3. Generating a lookup .csv list on Search Head captain ${captain}:"
  get_captain_apps_list 2>/dev/null
  if [[ -s /tmp/${search_peer}.Modify_sha1sum.time ]]
  then
     echo "OUTPUT: /tmp/${search_peer}.Modify_sha1sum.time"
  else
     {
      echo "`uname -n`:`basename $0` | Problem generating captain /tmp/${search_peer}.Modify_sha1sum.time"
     } | tee | mailx -s "Splunk Search Head Deployer `uname -n`: Issue with generating lookups in /tmp/${search_peer}.Modify_sha1sum.time" tos-platformsplunk-contact@mycorp.com
  fi
  echo

  echo "4. Generating a lookup .csv list on Deployer $(uname -n):"
  get_deployer_apps_list
  echo "OUTPUT: /tmp/deployer.Modify_sha1sum.time"
  echo

  echo "5. Identifying new/updated lookups and push to SH cluster:"
  update_SH_lookups
  echo
  echo "6. Changing UID:GID to ${uid_gid} on All Search Heads's ${SPLUNK_APPS}:"
  echo "/usr/local/bin/jldsh -ew ${search_peers} \"cd ${SPLUNK_ETC} && chown -R ${uid_gid} apps\" >/dev/null"
  /usr/local/bin/jldsh -ew ${search_peers} "cd ${SPLUNK_ETC} && chown -R ${uid_gid} apps"
  echo "END: $(date)"
} | tee ${LOG}/`basename $0`.${date_}
echo
echo "OUTPUT: ${LOG}/`basename $0`.${date_}"
