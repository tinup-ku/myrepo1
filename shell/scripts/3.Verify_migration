#!/bin/bash
###################################################################################
# After initial or subsequent Splunk indexer migration, this script gathers all   #
# warm/cold buckets in $SPLUNKINDEX_DATA/$app/[db|colddb] and compares copied     #
# buckets recorded in $MIGRATED/$app/[db|colddb] then flag missing buckets.       #
###################################################################################
# Written by user1 | mycorp Data Intelligence.
SPLUNKINDEX_DATA=/opt/splunkindex_data
MIGRATED=/opt/splunkindex_data/MIGRATED
date_=$(date '+%F_%H%M')

usage ()
{
cat<<END

Usage: $0 [[ -a app1,app2,app3 ]|[ -a all ]]

Where: -a lists app or multiple apps separated by comma (,)
       -a all (to show all apps)

END
exit 1
}

get_buckets_info ()
{
   list=""
   if [[ -d $SPLUNKINDEX_DATA/$1/$2 ]]
   then
      cd $SPLUNKINDEX_DATA/$1/$2 >/dev/null 2>&1 && {
          # Get bucket list
          # ls -d db_*_*_* >/dev/null 2>&1
          ls | grep -v '.lock' |grep 'db_' >/dev/null 2>&1
          [ "$?" = "0" ] && {
            declare -a bbucket_array=( "`echo db_*_*_*|grep -v '.lock'`" )
            # Generate a list from bbucket_array
            list="${bbucket_array[*]}"
          }
      }
   else
      echo "$SPLUNKINDEX_DATA/$1/$2 does not exist."
   fi
}

find_missing_bucket ()
{
  if [[ -f $MIGRATED/$1/$2/$1.dist ]]
  then
     for bucket in $list
     do
       # Verify if bucket is copied.
       # NOTE:-------------------------------|
       #                                     V (*) indicates all ${app}.dist.Phase_1.$$
       grep "$bucket" $MIGRATED/$1/$2/$1.dist* >/dev/null 2>&1 
       [[ "$?" != "0" ]] && echo "$SPLUNKINDEX_DATA/$1/$2/$bucket is NOT copied"
     done
  else
     echo "$MIGRATED/$1/$2/$1.dist does not exist."
     echo "Either $1 migration has not started, or there is no data."
  fi
}

##########
# M A I N
##########

if [[ "$#" = "0" ]]
then
   echo "Enter app(s) name separate by comma (,), or"
   echo -n "Filename and its location which contains apps? "
   read apps
else
   while [[ $# -gt 0 ]]
   do
     case $1 in
        -a ) apps=$2
             shift
             ;;
        -f ) apps=$2
             shift
             ;;
      -*|* )
             usage
             ;;
     esac
     shift
   done
fi

# Is it a filename or apps?
echo $apps|grep '/' >/dev/null
if [[ "$?" = "0" ]]
then
  # Check if file exists
  if [[ -f ${apps} ]]
  then
     apps=`awk -F: '{print $1}' ${apps}|grep -v '^#'|uniq`
     apps_=$apps
  else
     echo "${apps} doesnot exist!"
     exit 1
  fi
else
  apps=${apps//,/ }
  apps_=$apps
fi

echo apps_=${apps_}
{
date
for app in ${apps_}
do
  # Warm buckets
  get_buckets_info $app db
  echo
  find_missing_bucket $app db
  # Cold buckets
  get_buckets_info $app colddb
  echo
  find_missing_bucket $app colddb
done
} 2>&1 | tee `basename $0`.${date_}.OUT.$$
date
echo
echo "OUTPUT: $0.${date_}.OUT.$$"
