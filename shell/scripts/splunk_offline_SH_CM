#!/bin/ksh
# Splunk Service account:
#ser_act.prod:VAS:500327:9998:ser_act.prod:/ser_act.prod:/bin/ksh
#ser_act.dev:VAS:562314:60231:ser_act.dev:/ser_act.dev:/bin/ksh
date_=$(date '+%a%H%M_%m%d%Y')
env_=`uname -n`
typeset -R3 env_

# Disable splunk at start up
{
  echo "START: `date`"
  echo "Disable splunk at boot time"
  # Is it systemd or system V init?
  # Disable splunk at start up
  cd /etc/init.d && {
     [[ -f splunk ]] && {
           mv -f splunk Splunk
           chkconfig splunk off
     }
  }
  cd /etc/systemd/system && {
     [[ -f Splunkd.service ]] && systemctl disable Splunkd
     sleep 30s
     # Verify symlink is no longer there.
     [[ -L /etc/systemd/system/multi-user.target.wants/Splunkd.service ]] && {
       echo "Symlink /etc/systemd/system/multi-user.target.wants/Splunkd.service is still there. Abort"
       echo "Run systemctl disable Splunkd"
       exit
     }
  }
  echo
  echo "IMPORTANT: Please wait until the command line prompt is back."
  echo "           `uname -n` is reassigning its buckets to its peers in the cluster."
  {
    eval `gpg --batch --xyz xyz -quiet --no-verbose -d /.splunk` >/dev/null 2>&1
  } 2>/dev/null
  case ${env_} in
   pdv | bdv ) uid=ser_act.dev
               key=${dev}
               ;;
   some_loc | loc2 | loc3 | loc4 ) uid=ser_act.prod
                           key=${prod}
               ;;
           * )
               case `uname -n` in
                         ser2* ) uid=ser_act.prod
                                gid=unx_9998_access
                                key=${prod}
                                ;;
                   cud*| cut* ) uid=ser_act.dev
                                gid=unx_60231_splunk_admin_dev
                                key=${dev}
                                ;;
               esac
               ;;
  esac
  echo
  systemctl stop Splunkd
  # verify if splunkd is down
  pgrep -u ${uid} splunkd >/dev/null 2>&1
  [[ "$?" = "0" ]] && {
     echo "splunkd is killed. splunk_offline completed."
     pgrep -u ${uid} splunkd|xargs kill
     # Verify again
     sleep 2s
     pgrep -u ${uid} splunkd >/dev/null 2>&1
     echo "Final Kill splunkd"
     [[ "$?" = "0" ]] && pgrep -u ${uid} splunkd |xargs kill -9
  }
  echo
  echo "END of $0 : `date`"
  echo
  echo "This Indexer, `uname -n`, is ready for maintenance/OS Patching work."
  echo
  cat<<END
      ################## ATTENTION ATTENTION ATTENTION ###############
      #      Once Patching or Maintenance Completed, please run      #
      #                                                              #
      #                      re-enable_splunk                        #
      ################################################################

END
}| tee /var/tmp/`basename $0`.${date_}.OUT.$$

mailx -s "splunk_offline output|`uname -n`:/var/tmp/`basename $0`.${date_}.OUT.$$" user1@mycorp.com,user2@mycorp.com,user3@mycorp.com,user4@mycorp.com < /var/tmp/`basename $0`.${date_}.OUT.$$
systemctl daemon-reload
