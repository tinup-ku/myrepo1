#!/bin/bash
####################################################################################
# This script performs pre/post validation for Splunk servers.
# Preparations prior are based on links below:
#
# https://confluence.mycorp.com/display/TOS/How+To+%3A+Self-Service+Patching
# https://confluence.mycorp.com/display/TOS/How+to+%3A+Currency+Patching+Validation
# https://confluence.mycorp.com/display/TOS/Self-Service+Patching+%3A+Creating+CRQs+from+Red+Button
# https://confluence.mycorp.com/display/TOS/Self-Service+Patching+%3A+Specific+Validation+Procedures
# https://confluence.mycorp.com/display/TOS/Self-Service+Patching+Issues+and+Workarounds
# https://confluence.mycorp.com/display/TOS/Self-Service+Patching+Workarounds
# https://confluence.mycorp.com/pages/viewpage.action?pageId=2410554052
#
# References:
# https://confluence.mycorp.com/display/SAE/Patching
# REQUIREMENTS prior to servers patching:
# 1. Create a Patching Change ticket via Red Button.
#    For example, CRQ000001324473
# 2. On Splunk Control server, ser10966some_loc, as root
#    2.1 cd /root/CURRENCY_PATCHING
#    2.2 vi CRQ000001324473
#    2.3 In vi editor mode, add servers. Note, each server is on its own line. 
#        Make sure, there's NO empty/special character AFTER each line/hostname
# 3. MUST know the nature of servers, ie, 
#    . Indexer
#    . Search Head
#    . Other (Splunk Management nodes, HECs, syslog-ng)
# 
# 4. Thru jumpword 'JH', check out ad.first.last, to access root on ser109666some_loc
# 5. On ser1066some_loc, as root,
#    patching_status
####################################################################################
# Written by user1 | S.P.L.U.N.K Platform Support
date_=$(date '+%a%H%M_%m%d%Y')
bold_yellow="\e[1m\e[33m"
green=$(tput setaf 2)
red=$(tput setaf 1)
reset_color="\e[0m"
LOG=/var/tmp/PATCHING_LOG

read_input ()
{
  echo
  echo -en "Enter ${bold_yellow}CRQ${reset_color}#, or ${bold_yellow}hostname(s) separated by comma(,)${reset_color}? "
  read _input
  echo -e "Checking Patching Status on ${bold_yellow}${_input}${reset_color}"
  echo
  echo ${_input}|grep 'CRQ' >/dev/null
  if [[ "$?" = "0" ]]
  then
     CRQ=${_input}
     CRQ_flag=0
     [[ ! -s ~/CURRENCY_PATCHING/${CRQ} ]] && echo "~/CURRENCY_PATCHING/${CRQ} doesnot exist. Abort" && exit
  else
     # Ping test on each node
     echo "Ping test on each host entered ..."
     for node in `echo ${_input}|sed 's/,/ /g'`
     do
       ping -c 1 $node >/dev/null 2>&1
       [[ "$?" != "0" ]] && echo -e "${bold_yellow}***** ${reset_color}${red}$node is either DOWN/NOT_IN_DNS${reset_color} ${bold_yellow}*****${reset_color}"
     done
     echo
     CRQ_flag=1
     CRQ=${_input}
  fi

  echo -en "Is it ${bold_yellow}I${reset_color})ndexer, ${bold_yellow}S${reset_color})earch Head, or ${bold_yellow}O${reset_color})ther ${bold_yellow}Q${reset_color})uit? "
  read type_
  case ${type_} in 
       I|i|S|s )
                 ;;
           O|o )
                 echo -en "      \t\t\t\t ${bold_yellow}M${reset_color})anagement node, ${bold_yellow}H${reset_color})EC, or ${bold_yellow}S${reset_color})yslog-ng? "
                 read choice
                 echo $choice
                 case ${choice} in
                      M|m ) choice_m=0;;
                      H|h ) choice_h=0;;
                      S|s ) choice_s=0;;
                        * ) echo -e "${red}Wrong choice.${reset_color} Abort."
                            exit
                            ;;
                 esac
                 ;;
             * ) echo -e "${red}Wrong choice.${reset_color} Abort."
                 exit
                 ;;
  esac
}

stop_or_go ()
{
  echo
  echo -en "Try ${bold_yellow}A${reset_color})gain on ${CRQ}, ${bold_yellow}D${reset_color})ifferent CRQ, or ${bold_yellow}Q${reset_color})uit? "
  read rsvp
  #echo rsvp=$rsvp
  case ${rsvp} in
       A|a ) continue
             ;;
       D|d )
             choice_m=1
             choice_h=1
             choice_s=1
             read_input
             ;;
       Q|q ) echo "Good Bye" && exit
             ;;
         * )
             echo -e "Wrong option ${red}${rsvp}${reset_color}. Abort" && exit
             ;;
  esac
}

##########
# M A I N
##########
#clear
[[ ! -d ${LOG} ]] && mkdir -p ${LOG}
{
date
echo -en "Enter AD ${bold_yellow}first.last${reset_color}? "
read ad_uid
echo "$ad_uid"
read_input
while [ 1 ]
do
  case ${type_} in
       I|i )
           echo -e "${bold_yellow}1. Checking Indexers uptime${reset_color}"
           [[ ${CRQ_flag} = "0" ]] && jldsh -ec ~/CURRENCY_PATCHING/${CRQ} uptime || \
                                      jldsh -ew ${CRQ} uptime
           echo
           echo -e "${bold_yellow}2. Checking Indexers last reboot${reset_color}"
           [[ ${CRQ_flag} = "0" ]] &&  jldsh -ec ~/CURRENCY_PATCHING/${CRQ} "who -b" || \
                                       jldsh -ew ${CRQ} "who -b"
           echo
           echo -e "${bold_yellow}3. Checking Indexers last Currency Patched:${reset_color}"
           [[ ${CRQ_flag} = "0" ]] && jldsh -ec ~/CURRENCY_PATCHING/${CRQ} "stat -c '%y' /var/currency/flags" || \
                                      jldsh -ew ${CRQ} "stat -c '%y' /var/currency/flags"
           echo
           echo -e "${bold_yellow}4. Checking splunkd status${reset_color}" 
           [[ ${CRQ_flag} = "0" ]] && jldsh -ec ~/CURRENCY_PATCHING/${CRQ} "systemctl status Splunkd|grep Active" || \
                                      jldsh -ew ${CRQ} "systemctl status Splunkd|grep Active"
           echo
           echo -e "${bold_yellow}5. Checking Indexers splunkd process counts:${reset_color}"
           [[ ${CRQ_flag} = "0" ]] && jldsh -ec ~/CURRENCY_PATCHING/${CRQ} "pgrep splunkd|wc -l" || \
                                      jldsh -ew ${CRQ} "pgrep splunkd|wc -l"
           echo
           echo -e "${bold_yellow}6. Checking Indexers OS kernel release:${reset_color}"
           [[ ${CRQ_flag} = "0" ]] && jldsh -ec ~/CURRENCY_PATCHING/${CRQ} "uname -r" || \
                                      jldsh -ew ${CRQ} "uname -r"
           echo
           stop_or_go
           ;;
       S|s )
           echo -e "${bold_yellow}1. Checking Search Head uptime${reset_color}"
           [[ ${CRQ_flag} = "0" ]] && jldsh -ec ~/CURRENCY_PATCHING/${CRQ} uptime || \
                                      jldsh -ew ${CRQ} "uptime"
           echo
           echo -e "${bold_yellow}2. Checking Search Head last reboot${reset_color}"
           [[ ${CRQ_flag} = "0" ]] && jldsh -ec ~/CURRENCY_PATCHING/${CRQ} "who -b" || \
                                      jldsh -ew ${CRQ} "who -b"
           echo
           echo -e "${bold_yellow}3. Checking Search Head last Currency Patched${reset_color}"
           [[ ${CRQ_flag} = "0" ]] && jldsh -ec ~/CURRENCY_PATCHING/${CRQ} "stat -c '%y' /var/currency/flags" || \
                                      jldsh -ew ${CRQ} "stat -c '%y' /var/currency/flags"
           echo
           echo -e "${bold_yellow}4. Checking Search Head Splunkd status${reset_color}"
           [[ ${CRQ_flag} = "0" ]] && jldsh -ec ~/CURRENCY_PATCHING/${CRQ} "systemctl status Splunkd|grep Active" || \
                                      jldsh -ew ${CRQ} "systemctl status Splunkd|grep Active"
           echo
           echo -e "${bold_yellow}5. Checking Search Head splunkd process counts${reset_color}"
           [[ ${CRQ_flag} = "0" ]] && jldsh -ec ~/CURRENCY_PATCHING/${CRQ} "pgrep splunkd|wc -l" || \
                                      jldsh -ew ${CRQ} "pgrep splunkd|wc -l"
           echo
           echo -e "${bold_yellow}6. Checking Search Head OS kernel release:${reset_color}"
           [[ ${CRQ_flag} = "0" ]] && jldsh -ec ~/CURRENCY_PATCHING/${CRQ} "uname -r" || \
                                      jldsh -ew ${CRQ} "uname -r"
           echo
           echo -e "${bold_yellow}7. Checking Search Head kvstore status${reset_color}"
           [[ ${CRQ_flag} = "0" ]] && jldsh -ec ~/CURRENCY_PATCHING/${CRQ} "show_kvstore 2>/dev/null"|| \
                                      jldsh -ew ${CRQ} "show_kvstore 2>/dev/null"
           echo
           echo -e "${bold_yellow}8. Checking Search Head captain${reset_color}"
           [[ ${CRQ_flag} = "0" ]] && jldsh -ec ~/CURRENCY_PATCHING/${CRQ} "show_captain 2>/dev/null"|| \
                                      jldsh -ew ${CRQ} "show_captain 2>/dev/null"
           echo
           echo -e "${bold_yellow}9. Checking Search Head cluster status${reset_color}"
           [[ ${CRQ_flag} = "0" ]] && jldsh -ec ~/CURRENCY_PATCHING/${CRQ} "show_shcluster-status 2>/dev/null|grep -v _status|egrep 'label|status'"|dshbak || \
                                      jldsh -ew ${CRQ} "show_shcluster-status 2>/dev/null|grep -v _status|egrep 'label|status'"|dshbak
           echo
           stop_or_go
           ;;
       O|o )
           echo -e "${bold_yellow}1. Checking servers uptime${reset_color}"
           [[ ${CRQ_flag} = "0" ]] && jldsh -ec ~/CURRENCY_PATCHING/${CRQ} uptime || \
                                      jldsh -ew ${CRQ} uptime
           echo
           echo -e "${bold_yellow}2. Checking servers last reboot${reset_color}"
           [[ ${CRQ_flag} = "0" ]] && jldsh -ec ~/CURRENCY_PATCHING/${CRQ} "who -b" || \
                                      jldsh -ew ${CRQ} "who -b"
           echo
           echo -e "${bold_yellow}3. Checking servers last Currency Patched${reset_color}"
           [[ ${CRQ_flag} = "0" ]] && jldsh -ec ~/CURRENCY_PATCHING/${CRQ} "stat -c '%y' /var/currency/flags" || \
                                      jldsh -ew ${CRQ} "stat -c '%y' /var/currency/flags"
           echo

           if [[ ${choice_s} = "0" ]]
           then
             echo -e "${bold_yellow}4. Checking Splunk Forwarder service status${reset_color}"
             [[ ${CRQ_flag} = "0" ]] && jldsh -ec ~/CURRENCY_PATCHING/${CRQ} "systemctl status SplunkForwarder|grep Active" || \
                                        jldsh -ew ${CRQ} "systemctl status SplunkForwarder|grep Active"              
           else
             echo -e "${bold_yellow}4. Checking splunkd status${reset_color}"
             [[ ${CRQ_flag} = "0" ]] && jldsh -ec ~/CURRENCY_PATCHING/${CRQ} "systemctl status Splunkd|grep Active" || \
                                        jldsh -ew ${CRQ} "systemctl status Splunkd|grep Active"
           fi
           echo
           echo -e "${bold_yellow}5. Checking servers splunkd process counts${reset_color}"
           [[ ${CRQ_flag} = "0" ]] && jldsh -ec ~/CURRENCY_PATCHING/${CRQ} "pgrep splunkd|wc -l" || \
                                      jldsh -ew ${CRQ} "pgrep splunkd|wc -l"
           echo
           echo -e "${bold_yellow}6. Checking servers OS kernel release:${reset_color}"
           [[ ${CRQ_flag} = "0" ]] && jldsh -ec ~/CURRENCY_PATCHING/${CRQ} "uname -r" || \
                                      jldsh -ew ${CRQ} "uname -r"
           echo
           [[ ${choice_h} = "0" ]] && {
              echo -e "${bold_yellow}7. Checking servers HEC port 8088:${reset_color}"
              [[ ${CRQ_flag} = "0" ]] && jldsh -ec ~/CURRENCY_PATCHING/${CRQ} "netstat -an|grep '0.0.0.0:8088'" || \
                                         jldsh -ew ${CRQ} "netstat -an|grep '0.0.0.0:8088'"
           }

           [[ ${choice_s} = "0" ]] && {
              echo -e "${bold_yellow}8. Checking syslog-ng service:${reset_color}"
              [[ ${CRQ_flag} = "0" ]] && jldsh -ec ~/CURRENCY_PATCHING/${CRQ} "systemctl status syslog-ng|grep Active" || \
                                         jldsh -ew ${CRQ} "systemctl status syslog-ng|grep Active"
           }
           stop_or_go
           ;;
         * )
           echo -e "Wrong option ${red}${type_}${reset_color}. Abort" && exit
           ;; 
  esac
done
} | tee ${LOG}/`basename $0`.${date_}.OUT
