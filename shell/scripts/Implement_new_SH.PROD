#!/bin/ksh
######################################################################################
# This script performs the followings
# 1. Install splunk 7.2.3 on RAID1 OS drive, ie, root filesystem: /opt/splunk
# 2. Change ulimit's nofile and nproc from default to 262144 and 131072, respectively.
# 3. Change kernel paramater from default to fs.file-max = 2048000
# 4. Install the latest Java and RHEL packages:
#    kernel-headers
#    glibc-headers
#    gcc
#    gdb
#    zip
#    unzip
# 5. Disable Transparent Huge Page (THP) as recommended by Splunk
# 6. Configure 372.0GB drive as RAID0 then allocate 100GB lvm ext4i then update
#    local mount table to mount /opt/splunk/var/run/splunk/dispatch
#
# NOTE: Once the initial layout is completed, perform steps below to integrate into
#       existing Search Head cluster.
# 7. Convert splunk running as root to splunk service account.
#    On Splunk Control server's /root/script, as root
#    jldsh -ew ${new_search_head} -s ./Convert_Splunk_to_svcacct
# 8. On new search head's splunk service account home directory, run
#    /ser_act.prod/add_SH_to_SH_Cluster with option, adhoc|none
#    then follow instructions once the script ran
######################################################################################
# Physical Disks Layout on 22 Dell 740xd on https://splunk.mycorp.com
# -------------------------------------------------------------------------
# DG Arr Row EID:Slot DID Type  State BT      Size PDC  PI SED DS3  FSpace
# -------------------------------------------------------------------------
#  0 -   -   -        -   RAID1 Optl  N  185.75 GB dflt N  N   dflt N
#  0 0   -   -        -   RAID1 Optl  N  185.75 GB dflt N  N   dflt N
#  0 0   0   64:24    24  DRIVE Onln  N  185.75 GB dflt N  N   dflt -
#  0 0   1   64:25    25  DRIVE Onln  N  185.75 GB dflt N  N   dflt -
#  1 -   -   -        -   RAID0 Optl  N   372.0 GB dflt N  N   dflt N
#  1 0   -   -        -   RAID0 Optl  N   372.0 GB dflt N  N   dflt N
#  1 0   0   64:0     0   DRIVE Onln  N   372.0 GB dflt N  N   dflt -
# -------------------------------------------------------------------------
#
# Virtual Drives:
# --------------------------------------------------------------------
# DG/VD TYPE  State Access Consist Cache sCC      Size Name
# --------------------------------------------------------------------
# 0/0   RAID1 Optl  RW     Yes     RWBD  -   185.75 GB Virtual Disk 0
# 1/1   RAID0 Optl  RW     Yes     RWBD  -    372.0 GB Virtual Disk1
# --------------------------------------------------------------------
#
# NOTE: There's additional drive currently not use.
# --------------------------------------------------------------------
# EID:Slt DID State DG     Size Intf Med SED PI SeSz Model         Sp
# --------------------------------------------------------------------
# 64:1      1 UGood -  372.0 GB SATA SSD N   N  512B THNSF8400CCSE U
# --------------------------------------------------------------------
#################################################################################
# Written by user1 | T.O.S
SPLUNK_HOME=/opt/splunk
SPLUNK_BIN=${SPLUNK_HOME}/bin
LOCAL_BIN=/usr/local/bin
date_=$(date '+%F_%H%M')

[[ `uname -n` = "ser15000some_loc" ]] && {
   echo "Running $0 on wrong node: ser15000some_loc"
   exit
}

check_DISK ()
{
 flag=false
 while [[ "$flag" = "false" ]]
 do
   if [[ ! -b $1 ]]
   then
     echo "Pause for 3 seconds."
     sleep 3s
   else
    flag=true
   fi
 done
}

install_splunk.RHEL7 ()
{
  # BEGIN install_splunk.RHEL7
  ##############################################################################
  # This function installs Splunk on RHEL7 server. Splunk starts via systemd
  # rather than sysV initd.
  # Splunk specific version package is staged in 
  # nfs-bde-dev.dev.mycorp.com:/mapr/BDEDev/splunk/${ver} 
  # and can be access, as root, via
  # mount nfs-bde-dev.dev.mycorp.com:/mapr/BDEDev/splunk /mnt
  ##############################################################################

  usage ()
  {
    cat<<END

    Usage: $0 [ -v version_number ]

    Where: -v version to install

END
    exit 1
  }

  if [[ ! $1 ]]
  then
    echo -n "Enter Splunk version (ie, 7.2.3) to install? "
    read ver
  else
    while [[ $# -gt 0 ]]
    do
      case $1 in
         -v ) ver=$2
              shift
              ;;
       -*|* )
              usage
              ;;
      esac
      shift
    done
  fi

  [[ -z ${ver} ]] && usage

  # Check if splunk subsystem object exists
  rpm -qa | grep splunk >/dev/null
  [[ "$?" = "0" ]] && {
      splunk_manifest=`ls ${SPLUNK_HOME}/splunk-${ver}*-manifest`
      # Check for ${SPLUNK_HOME}/splunk-${ver}*-manifest
      [[ -f ${splunk_manifest} ]] && {
       echo "Splunk manifest already exists: ${splunk_manifest}. Abort"
        exit
      }
  }

  echo ver=$ver

  mount|grep 'nfs-bde-dev.dev.mycorp.com:/mapr/BDEDev/splunk' >/dev/null
  [[ "$?" != "0" ]] && {
    mkdir /mnt1 >/dev/null
    echo "Mounting nfs-bde-dev.dev.mycorp.com:/mapr/BDEDev/splunk /mnt1"
    mount nfs-bde-dev.dev.mycorp.com:/mapr/BDEDev/splunk /mnt1

    # Check if ${ver} in Splunk repo
    [[ ! -d /mnt1/${ver} ]] && {
       echo "${ver} does not exist in Splunk repo."
       exit
    }

    cd /mnt1/${ver}/linux && {
      splunk_rpm=`ls splunk-${ver}*.rpm 2>/dev/null`
      [[ -z ${splunk_rpm} ]] && {
           echo "/mnt1/${ver}/linux, splunk package does not exist. Abort"
           exit 3
      }
    }
  }

  echo splunk_rpm=$splunk_rpm

  if [[ -f /mnt1/${ver}/linux/${splunk_rpm} ]]
  then
    echo "Installing /mnt/${ver}/linux/${splunk_rpm}"
    rpm -ivh /mnt1/${ver}/linux/${splunk_rpm}
  else
    echo "Package /mnt1/${ver}/linux/${splunk_rpm} doesnot exist. Abort"
    exit
  fi

  echo "Creating ${SPLUNK_HOME}/etc/system/local/user-seed.conf"
  cat <<END > ${SPLUNK_HOME}/etc/system/local/user-seed.conf
[user_info]
USERNAME = admin
PASSWORD = `uname -n`_admin
END

  echo
  echo "Enable splunk@system bootup"
  ${SPLUNK_BIN}/splunk enable boot-start --answer-yes --no-prompt --accept-license
  echo
  echo "Enable Splunkd.service"
  systemctl enable Splunkd.service
  echo "Start Splunkd.service"
  systemctl start Splunkd.service
  echo
  echo "Checking Splunkd.service status"
  systemctl status Splunkd.service

  echo "Copying show_splunk to $LOCAL_BIN"
  cd /mnt1/scripts && cp -f show_splunk.RHEL7 $LOCAL_BIN/show_splunk
  echo
  echo "In $LOCAL_BIN, creating stop_splunk, start_splunk"
  cat <<END > $LOCAL_BIN/start_splunk
#!/bin/ksh
systemctl start Splunkd.service
END

  cat<<END_ > $LOCAL_BIN/stop_splunk
#!/bin/ksh
systemctl stop Splunkd.service
systemctl daemon-reload
END_

  cd /usr/local/bin && chmod +x start_splunk stop_splunk

}
# END install_splunk.RHEL7 ()

##########
# M A I N
##########
{
# --------------------------
# Part I: On OS RAID1 drive:
# --------------------------
# If splunk splunk-7.2.3-06d57c595b80.x86_64 installed then exit
if [[ "`rpm -q splunk`" = "splunk-7.2.3-06d57c595b80.x86_64" ]]
then
  echo "splunk-7.2.3-06d57c595b80.x86_64 installed. Abort."
else  
  install_splunk.RHEL7 -v 7.2.3
fi

# Check if perccli installed.
rpm -q perccli >/dev/null
[[ "$?" != "0" ]] && {
   umount -l /mnt
   mount share_server.dev.mycorp.com:/infra/loc /mnt
   cd /mnt/Splunk && rpm -ivh perccli-1.11.03-1.noarch.rpm
   ln -s /opt/MegaRAID/perccli/perccli64 /usr/local/bin/perccli
}
   
# Update mount table with NAS: /ELI and /splunk_data_export
grep '/ELI' /etc/fstab >/dev/null
[[ "$?" != "0" ]] && \
    echo 'entnas5:/vol/f0_ent_vol4/eli_splunk-prod   /ELI   nfs   nfsvers=3,rsize=32768,wsize=32768,intr,tcp,rw   0  0' >> /etc/fstab

grep '/splunk_data_export' /etc/fstab >/dev/null
[[ "$?" != "0" ]] && \
   echo 'nas30u0a2b.some_loc.mycorp.com:/splunk/eli_splunkSH-Prod  /splunk_data_export    nfs     rw,bg,soft,nfsvers=3,intr    0 0' >> /etc/fstab


# Create mount point /ELI and /splunk_data_export
mkdir -p /ELI /splunk_data_export

# Install latest Java
umount /mnt 2>/dev/null
mount share_server.dev.mycorp.com:/infra/loc /mnt
rpm -ivh /mnt/Java/JDK-1.8-Latest-Linux64.rpm
umount /mnt 2>/dev/null

# Install additional packages as required by METs
# BEFORE
#os-update -ay install kernel-headers
# AFTER
os-update -k `uname -r|sed 's/.x86_64//g'` -y install kernel-headers
os-update -y install glibc-headers
os-update -y install gcc
os-update -y install gdb
os-update -y install zip
os-update -y install unzip
os-update -y install nc
os-update -y install nmap
rpm -q kernel-headers glibc-headers gcc gdb zip unzip nc nmap

# Set up splunk parameters
# 1. /etc/security/limits.conf
mv -f /etc/security/limits.conf /etc/security/limits.conf.ORIG
{
cat /etc/security/limits.conf.ORIG
cat<<END_
# Begin Splunk Settings
*     soft    nofile  262144
*     hard    nofile  262144
# End Splunk Settings
END_
} >> /etc/security/limits.conf

# 2. /etc/sysctl.conf
mv -f /etc/sysctl.conf /etc/sysctl.conf.ORIG
{
cat /etc/sysctl.conf.ORIG
cat<<END__
# Begin Splunk Settings
fs.file-max = 2048000
# End Splunk Settings
END__
} >> /etc/sysctl.conf
sysctl -p

# 3. /etc/security/limits.d/20-nproc.conf: nproc set to 131072 per Splunk's recommendation.
{
cat<<END
# Default limit for number of user's processes to prevent
# accidental fork bombs.
# See rhbz #432903 for reasoning.

*          soft    nproc     131072
*          hard    nproc     131072
root       soft    nproc     unlimited
END
} > /etc/security/limits.d/20-nproc.conf

chmod 644 /etc/security/limits.d/20-nproc.conf

# On RHEL6/7, Splunk recommends to turn off Transparent Huge Pages (THP).

[ -x /etc/rc.d/rc.local ] && {
  /bin/cp -p /etc/rc.d/rc.local /etc/rc.d/ORIG.rc.local
  {
    cat /etc/rc.d/ORIG.rc.local
    cat<<EOF

# On RHEL6/7, Splunk recommends to turn off Transparent Huge Pages (THP). 
# This has a profound impact on system load. There's a decent Oracle Blog 
# about it at 
# https://blogs.oracle.com/linux/entry/performance_issues_with_transparent_huge. 
# http://answers.splunk.com/answers/112305/on-rh-6-and-splunk-6-my-searches-are-consuming-lots-of-cpu
echo never > /sys/kernel/mm/transparent_hugepage/enabled
echo never > /sys/kernel/mm/transparent_hugepage/defrag

EOF
  } > /etc/rc.d/rc.local
chmod +x /etc/rc.d/rc.local
/etc/rc.d/rc.local
}

# -------------------------------------------------------------
# Part II: On RAID0 drive: /opt/splunk/var/run/splunk/dispatch
# -------------------------------------------------------------
# On the unconfigured drives: /dev/sdb: 399.4 GB on slot 0 (first slot)
# [root@s3146loc2 ~]# fdisk -l |grep '/dev/sd'
# Disk /dev/sda: 199.4 GB, 199447543808 bytes, 389545984 sectors
# Disk /dev/sdb: 399.4 GB, 399431958528 bytes, 780140544 sectors

# Create RAID0 virtual drive for /opt/splunk/var/run/splunk/dispatch 
perccli /c0 add vd type=raid0 drives=64:0

# Partiton new drive, /dev/sdb
DISK=`fdisk -l|awk '/399.4/{print $2}'|sed 's/://g'`

check_DISK $DISK

fdisk -l|grep "^Disk ${DISK}: 399.4 GB" >/dev/null
if [[ -b ${DISK} ]]
then
   echo "Formatting ${DISK}"
   parted -s ${DISK} mklabel gpt
   parted -s -- ${DISK} unit GB mkpart primary ext4 0% 100%
   partprobe ${DISK}
   parted ${DISK} print
   pvcreate -y ${DISK}1 
   vgcreate splunkvg ${DISK}1
   echo "Creating splunklv: 100GB"
   lvcreate -L 100G -n splunklv splunkvg
   # Format the ${DISK}
   mkfs.ext4 -E lazy_itable_init=1 /dev/splunkvg/splunklv
else
   echo "Disk ${DISK} doesnot exit. Abort!"
   exit
fi

# Update mount table
echo '/dev/splunkvg/splunklv /opt/splunk/var/run/splunk/dispatch ext4 noatime,errors=remount-ro 1 0' >> /etc/fstab
mkdir -p /opt/splunk/var/run/splunk/dispatch
cd /opt
chown -R ser_act.prod:unx_9998_access splunk
} | tee /root/`basename $0`.${date_}.OUT
echo
echo "OUTPUT: /root/`basename $0`.${date_}.OUT"
cd && umount -f /mnt1 && rmdir /mnt1

