#!/bin/bash
################################################################################
# This script upgrades splunk Indexers and Search Heads to newer version.
# Steps before running this script,
# 1. Download latest/specific package from 
#    https://www.splunk.com/en_us/download/splunk-enterprise.html 
# 2. On s5000some_loc/loc2, create a directory /hadoop/splunk/${splunk_version}/linux
# 2. On nfs-bde-dev.devdomain1:/hadoop/splunk, create a directory 
#    /hadoop/splunk/${splunk_version}/linux
#    For example, /hadoop/splunk/6.5.2.3/linux
#    and Copy splunk .rpm and its .md5 to this directory
# 3. Go to /hadoop/splunk/6.5.2.3/linux, and run `createrepo -d .`
# 4. In /hadoop/splunk/repos, create a file with naming convention
#    splunk${version_number}.repo. For example, splunk6.5.2.3.repo
# 5. On Splunk control server, ser14189some_loc, as root,
#    If indexers, as root
#    jldsh -eg splunk_pdc3 "upgrade_splunk -v 6.5.2.3"
#    Where splunk_pdc3 is GROUP defined in $CLUSTER for all PDC3 Indexers
# NOTE:
#    On upgraded Indexer/Search Head, output is in 
#    /var/tmp/splunk6.5.2.3_upgrade.out
################################################################################
# user_ | com2 Data Intelligence
# Check if Splunk is at current level:
pkg=`rpm -q splunk`
version=`echo ${pkg} |awk -F"-" '{print $2}'`
date_=`date '+%Y%m%d'`

# Is Splunk running as a service account or root/splunk?
cd /opt/splunk  && {
  pre_uid=`ls -ld etc|awk '{print $3}'`
  pre_gid=`ls -ld etc|awk '{print $4}'`
  }

echo "pre_uid=$pre_uid  pre_gid=$pre_gid"

usage ()
{
  cat<<END

  Usage: $0 [ -v version_number ]

  Where: -v version to upgrade

END
  exit 1
}

unmount_mnt ()
{
  # Unmount more than 1 /mnt
  for mount_point in `mount|grep nfs|grep '/mnt'|awk '{print $3}'`
  do
    echo "umount -l $mount_point"
    umount -l $mount_point
  done
}


convert_to_service_account ()
{
  # Convert splunk to service account
  echo "Convert /opt/splunk to service account: ${pre_uid}:${pre_gid}"

  echo "Changing to ${pre_uid}:${pre_gid} /opt/splunk"
  [ -d /opt/splunk ] && \
  cd /opt && chown -R ${pre_uid}:${pre_gid} splunk

  # Remove local splunk entry.
  echo "Removing splunk local entry in /etc/passwd /etc/group /etc/shadow /etc/gshadow"
  sed -i '/^splunk/d' /etc/passwd /etc/group /etc/shadow /etc/gshadow

  chmod 500 /opt/splunk/bin/splunk
  chmod u+s /opt/splunk/bin/splunk  
  echo "Verifying /opt/splunk/bin/splunk"
  ls -l /opt/splunk/bin/splunk
}

check_splunk_process ()
{
    ps aux|grep [s]plunk >/dev/null
    status=$?
    [[ "$status" != "0" ]] && {
      echo "Splunk is still UP. Upgrade to Splunk version ${ver} Aborted."
      ps aux|grep [s]plunk
      exit 2
    }
}

stop_splunk_process ()
{
# Is it systemd or systemV init?
  if [[ -f /etc/systemd/system/Splunkd.service ]]
  then
     systemctl stop Splunkd
  else
     if [[ -f /etc/init.d/splunk ]]
     then
        service splunk stop
     fi
  fi
  # Verify
  pgrep -u ${pre_uid} splunkd >/dev/null 2>&1
  [[ "$?" = "0" ]] && pgrep -u ${pre_uid} splunkd | xargs kill -9
  pgrep -u ${pre_uid} mongod >/dev/null 2>&1
  [[ "$?" = "0" ]] && pgrep -u ${pre_uid} mongod | xargs kill -9
}

##########
# M A I N
##########
if [[ ! $1 ]]
then
  echo -n "Enter Splunk version (ie, 6.5.2.3) to upgrade? "
  read ver
else
   while [[ $# -gt 0 ]]
   do
     case $1 in
        -v ) ver=$2
             shift
             ;;
      -*|* )
             usage
             ;;
     esac
     shift
   done
fi

[[ -z ${ver} ]] && usage

{

if [[ "${version}" != "${ver}" ]]
then
  # Stop splunk
  stop_splunk_process
  
  splunk_status=`show_splunk|awk '/SPLUNK/{print $NF}'`
  echo splunk_status=$splunk_status
  if [[ "${splunk_status}" = "UP" ]]
  then
     echo "Splunk is still running. Try to stop Splunk again"
     stop_splunk_process
  fi

  echo "Sleep for 3 seconds then check splunk process again."
  sleep 3
  status=`show_splunk|awk '/SPLUNK/{print $NF}'`
  if [[ "${status}" = "DOWN" ]]
  then
    check_splunk_process
    echo "#########################################"
    echo "Backing up current Splunk ${version} to /opt/splunk/etc-splunk-${version}.tar.gz"
    cd /opt/splunk && tar czpf etc-splunk-${version}.tar.gz etc/
    echo
    echo "BACKUP COMPLETED: /opt/splunk/etc-splunk-${version}.tar.gz"
    echo
    echo "#########################################"
  else
    check_splunk_process
  fi

  # Verifying backup 
  [[ ! -s /opt/splunk/etc-splunk-${version}.tar.gz ]] && {
    echo "Backup file /opt/splunk/etc-splunk-${version}.tar.gz does not exist."
    echo "Upgrade splunk to ${ver} abort."
    exit 3
  }

  ## Upgrade Splunk
  unmount_mnt
  mount share_server.devdomain1:/infra/loc /mnt
  [[ "$?" = "0" ]] && {
     echo "Upgrading Splunk to ${ver}"
     echo
     cd /mnt/Splunk/${ver} && {
       splunk_rpm=`ls -f splunk-${ver}*.rpm 2>/dev/null`
       [[ -z ${splunk_rpm} ]] && {
          echo "/mnt/Splunk/${ver}, package does not exist. Abort"
          exit 3
       }

       rpm -Uvh ${splunk_rpm}

       ## Once upgraded, check splunk's uid. If service account, convert
       cd /opt/splunk/bin  && post_uid=`ls -ld splunkd|awk '{print $3}'`

       [[ "${post_uid}" != "${pre_uid}" ]]  && convert_to_service_account

       ## Start Splunk....
       if [[ "${pre_uid}" = "svc_act1" ]] || [[ "${pre_uid}" = "svc_act2" ]]
       then
          echo "Running su - ${pre_uid} -c '/opt/splunk/bin/splunk start --answer-yes --no-prompt --accept-license'"
          su - ${pre_uid} -c '/opt/splunk/bin/splunk start --answer-yes --no-prompt --accept-license'
       else
          echo "Running /opt/splunk/bin/splunk start --answer-yes --no-prompt --accept-license"
          /opt/splunk/bin/splunk start --answer-yes --no-prompt --accept-license
       fi

       ## Make sure Splunk is NOT up....
       stop_splunk_process
       show_splunk -s
     }
  }
else
  echo "Current splunk version: ${pkg}"
fi
echo -n "SPLUNK_UPGRADE_COMPLETED: `rpm -q splunk`"
} | tee /root/`basename $0`.${date_}.OUT
