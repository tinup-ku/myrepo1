

node=`uname -n`
node_fqdn=$(host $node|awk '{print $1}')
SPLUNK_LOCAL=/opt/splunk/etc/system/local
SPLUNK_BIN=/opt/splunk/bin
date_=$(date '+%a%H%M_%m%d%Y')
env_=`uname -n|grep -o '...$'`
bold_yellow="\e[1m\e[33m"
green=$(tput setaf 2)
red=$(tput setaf 1)
reset_color="\e[0m"

set_env ()
{
   case ${env__} in
        PR|pr|pR|Pr )
                      F5_fqdn=splunk-preprod.cname.com
                      SH_Deployer=sname0982dome1.dome1.cname.com
                      secret=some1
                      shcluster_label=shc1
                      option=preprod
                      ;;
                P|p )
                      F5_fqdn=splunk.cname.com
                      SH_Deployer=splunkdeployer.cname.com
                      secret=some2
                      shcluster_label=shc2
                      echo -en "Is ${node} [${bold_yellow}A${reset_color}]dhoc, or [${bold_yellow}N${reset_color}]one? "
                      read ans
                      case ${ans} in
                            A|a ) option=adhoc
                                  ;;
                            N|n ) option=none
                                  ;;
                      esac
                      ;;
                  * )
                      echo -en "Enter ${bold_yellow}PR${reset_color}, ${bold_yellow}P${reset_color},${bold_yellow}E|I|X${reset_color}. Try again."
                      exit
                      ;;
   esac
}

{
eval `gpg --batch --passphr -quiet --no-verbose -d /.adkf` >/dev/null 2>&1
} 2>/dev/null


# Service Account only.
case ${env_} in
   pdv | bdv ) uid=service_dev
               key=${dev}
               ;;
   dome1 | dom2 | tdc |dc7  ) uid=service_prod
                           key=${prod}
               ;;
           * )
               case `uname -n` in
                        cup1* | cup4* | cup7* ) uid=service_prod
                                                key=${prod}
                                                ;;
                        cud*| cut* ) uid=service_dev
                                     key=${dev}
                                     ;;
               esac
               ;;
esac

if [[ "`whoami`" != "${uid}" ]]
then
   echo "Running `basename $0` as ${uid} only. Abort."
   exit
fi

echo "Initializing Search Head $node to Search Head Cluster."

echo -en "Is it [${bold_yellow}PR${reset_color}]e-Prod, [${bold_yellow}P${reset_color}]ROD, [${bold_yellow}E${reset_color}]S, or [${bold_yellow}I${reset_color}]TSI, or WebLog E[${bold_yellow}X${reset_color}]tract Search Head? "
read env__
set_env
captain=`curl -k -u admin:${key} https://${F5_fqdn}:8089/services/shcluster/captain/info 2>/dev/null|grep "label"| awk -F'>' '{print $2}'|sed 's/<\/s:key//g'`

{
# Initialize the instance
grep '^\[shclustering' ${SPLUNK_LOCAL}/server.conf >/dev/null
if [[ "$?" != "0" ]]
then
   echo "Initializing $node as option ${option} instance"
   ${SPLUNK_BIN}/splunk login -auth admin:${prod}
   ${SPLUNK_BIN}/splunk init shcluster-config -mgmt_uri https://${node_fqdn}:8089 -replication_port 9886 -replication_factor 3 -conf_deploy_fetch_url https://${SH_Deployer}:8089 -secret ${secret} -shcluster_label ${shcluster_label}
fi


case ${option} in
     adhoc )
            cat<<END

Add the followings to ${SPLUNK_LOCAL}/server.conf [shclustering] stanza:

conf_replication_include.ui-prefs = false
conf_replication_include.user-prefs = false
rep_cxn_timeout = 180
rep_rcv_timeout = 180
rep_send_timeout = 180
cxn_timeout = 120
send_timeout = 120
rcv_timeout = 120
conf_replication_include.passwd = true
captain_is_adhoc_searchhead = true
adhoc_searchhead = true

AND

[httpServer]
maxSockets = 262144
maxThreads = 131072

END
            #sed -i 's/\[shclustering\]/&\nconf_replication_include.passwd = true\ncaptain_is_adhoc_searchhead = true\nadhoc_searchhead = true/' ${SPLUNK_LOCAL}/server.conf
            sed -i 's/\[shclustering\]/&\nconf_replication_include.ui-prefs = false\nconf_replication_include.