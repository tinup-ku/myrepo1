
#!/bin/bash

PATH="/bin:/usr/bin:/sbin:/usr/sbin:/usr/local/bin"
PRODUCT=splunk
COMPONENT=splunk
SYSTEM=`uname -s`
HOSTNAME=`uname -n`
ARCH=`uname -p`

#JIRA:SPL-44381
URL_STRING="
To use the Splunk Web interface, point your browser to:
    http://$HOSTNAME:8000
"
echo $PRODUCT | grep -i forwarder > /dev/null && URL_STRING=""
# new_builder will change the product declaration above for the forwarder packages

UPGRADE=false

# debian, in their infinite wisdom does not think that postinst scripts need to
# know what version they're installing
get_installed_version()
{
        VERSION=`grep '^VERSION=' "$SPLUNK_HOME/etc/splunk.version" | sed 's/^VERSION=//'`
        if [ "x" = "x$VERSION" ] ; then
                echo >&2 "Couldn't read VERSION from \$SPLUNK_HOME/etc/splunk.version, something is wrong."
        fi
        export VERSION
}

get_installed_build()
{
        BUILD=`grep '^BUILD=' "$SPLUNK_HOME/etc/splunk.version" | sed 's/^BUILD=//'`
        if [ "x" = "x$BUILD" ] ; then
                echo >&2 "Couldn't read BUILD from \$SPLUNK_HOME/etc/splunk.version, something is wrong."
        fi
        export BUILD
}

case "x$SYSTEM" in
xLinux)
    if [ -z "$RPM_INSTALL_PREFIX" ] ; then
        SPLUNK_HOME="/opt/$PRODUCT"
        PREVIOUS_PACKAGE="$2"
        get_installed_version
        get_installed_build
        # if this is configure (not abort), we have a number, and the numbers
        # don't match, it's an upgrade
        if [ "x$1" = "xconfigure" ] && [ ! "x" = "x$PREVIOUS_PACKAGE" ] && [ ! "x$VERSION-$BUILD" = "x$PREVIOUS_PACKAGE" ] ; then
            UPGRADE=true
        fi
    else
        SPLUNK_HOME="$RPM_INSTALL_PREFIX/$PRODUCT"
        if  [ ! "x$1" = "x0" ] &&  [ ! "x$1" = "x1" ] ; then
        # not an uninstall, not a new install -> upgrade
            UPGRADE=true
        fi
    fi
    result=$(curl -s metadata.google.internal -i | grep -o "Google")
    if [ -n "$result" ]; then
        if [ -d "$SPLUNK_HOME/bin/google-sdk-packages" ]; then
            "$SPLUNK_HOME/bin/splunk" cmd python3 -m pip install --upgrade --no-index --force-reinstall --find-links="$SPLUNK_HOME/bin/google-sdk-packages/" -r "$SPLUNK_HOME/bin/google-sdk-packages/requirements.txt" > "$SPLUNK_HOME/bin/google-sdk-packages/google-sdk-install.log"
        fi
    fi
    ;;

xDarwin)
    SPLUNK_HOME="$2/$PRODUCT"
    # If installing in /Applications/splunk, the old OSX installer would pass us
    # /Applications.  The newer one passes /Applications/splunk.  Work with
    # those possibilities.
    if [ ! -f "$SPLUNK_HOME/bin/splunk" ]; then
        SPLUNK_HOME="$2"
    fi
    LAUNCHER_RSRC_PATH="$SPLUNK_HOME"/bin/Splunk.app/Contents/Resources/SPLUNK_HOME.path
    ;;

xSunOS)
     SPLUNK_HOME="$CLIENT_BASEDIR/$PRODUCT"
     if [ ! "x$UPDATE" = "x" ] ; then
         UPGRADE=true
     fi
     ;;

x*BSD)
    SPLUNK_HOME="$PKG_PREFIX/$PRODUCT"
    ;;

esac

if [ ! -f "$SPLUNK_HOME/etc/splunk-launch.conf" ] ; then
    sed "s%# SPLUNK_HOME=.*%SPLUNK_HOME=$SPLUNK_HOME%g" "$SPLUNK_HOME/etc/splunk-launch.conf.default" > "$SPLUNK_HOME/etc/splunk-launch.conf"
fi
touch "$SPLUNK_HOME/ftr"


# Build the post-install messaging in steps:

# Part of the messaging for Splunk upgrades.
if [ "$UPGRADE" = "true" ] ; then
echo "-------------------------------------------------------------------------
Splunk has been updated in:
        $SPLUNK_HOME" \
        > "$SPLUNK_HOME/ftr"

# Part of the messaging for fresh installs of Splunk.
else
echo "-------------------------------------------------------------------------
Splunk has been installed in:
        $SPLUNK_HOME" \
        > "$SPLUNK_HOME/ftr"
fi

# OSX-only messaging (if the desktop icon is included in this package).
if [ -f "$LAUNCHER_RSRC_PATH" ]; then
echo "
Double-click the \"Splunk\" icon on the Desktop to start and connect to
Splunk.  You may want to drag this icon to the Dock.




You can also manage Splunk manually:" \
        >> "$SPLUNK_HOME/ftr"
fi

# Rest of the messaging.
echo "
To start Splunk, run the command:
        $SPLUNK_HOME/bin/splunk start

$URL_STRING

Complete documentation is at http://docs.splunk.com/Documentation/Splunk
-------------------------------------------------------------------------" \
        >> "$SPLUNK_HOME/ftr"


splunk_user_exists=false
splunkfwd_user_exists=false
case "x`uname -s`" in
xLinux|xSunOS|x*BSD)
    # Linux, SunOS, and FreeBSD seem to offer the 'id' command reliably.
    # Not sure about other unixes --jrodman
    if [ "$COMPONENT" = "forwarder" ]; then
        if id splunkfwd >/dev/null 2>&1; then
            splunkfwd_user_exists=true
        fi
    else
        if id splunk >/dev/null 2>&1; then
            splunk_user_exists=true
        fi
    fi
    ;;
*)
    if [ "$COMPONENT" = "forwarder" ]; then
        if grep '^splunkfwd:' /etc/passwd >/dev/null ; then
            splunkfwd_user_exists=true
        fi
    else
        if grep '^splunk:' /etc/passwd >/dev/null ; then
            splunk_user_exists=true
        fi
    fi
    ;;
esac

fwd_user_group=""
if [ "$COMPONENT" = "forwarder" ]; then
    # SPL-227402: should not chown to the hardcoded user if it's upgrade. Try to get the existing user/group
    splunkd_xml="$SPLUNK_HOME/etc/myinstall/splunkd.xml"
    if [ "x$SYSTEM" = "xLinux" -a -f "$splunkd_xml" ] ; then
        xml_user_group=`stat -c '%U:%G' "$splunkd_xml" 2> /dev/null`
        # check "stat" cmd succeeded or not with -c. If it fails, don't get previous user/group
        if [ $? = 0 -a "x$xml_user_group" != "xUNKNOWN:UNKNOWN" -a "x$xml_user_group" != "xunknown:unknown" ] ; then
            fwd_user_group="$xml_user_group"
        fi
    fi

    # the default user might not exist since preinstall checked the owner of splunkd.xml too
    if [ "x$splunkfwd_user_exists" = "xtrue" -a -z "$fwd_user_group" ] ; then
        fwd_user_group="splunkfwd:splunkfwd"
    fi

    if [ -n "$fwd_user_group" ]; then
        chown -R $fwd_user_group "$SPLUNK_HOME"
    else
        find "$SPLUNK_HOME" ! -user $USER -exec chown $USER:$GROUP {} \;
    fi
elif [ "x$splunk_user_exists" = "xtrue" ] ; then
    # XXX no test for group :-(
    find "$SPLUNK_HOME" ! -user splunk -exec chown splunk:splunk {} \;
else
    find "$SPLUNK_HOME" ! -user $USER -exec chown $USER:$GROUP {} \;
fi

case "x$SYSTEM" in
xDarwin)
    # setup gui launcher only if it's included in the package.
    if [ -f "$LAUNCHER_RSRC_PATH" ]; then
        # update setting for the gui launcher.
        echo -n "$SPLUNK_HOME" > "$LAUNCHER_RSRC_PATH"
        if [ ! -f ~/Desktop/Splunk ]; then
            osascript -e "tell application \"Finder\" to make new alias at (path to desktop folder) to POSIX file \"/$SPLUNK_HOME/bin/Splunk.app\""
        fi
    fi

    #first setup the icon which should be located in /Applications/Splunk/.icon_folder.icns
    echo "Creating custom icon for Splunk folder"
    iconSource="$SPLUNK_HOME/.icon_folder.icns"
    iconDestination=$SPLUNK_HOME
    echo $iconSource
    icon=/tmp/`basename $iconSource`
    echo $icon
    rsrc=/tmp/icon.rsrc
    echo $rsrc

    echo "cp $iconSource $icon"
    cp "$iconSource" "$icon" || fail "Failed to copy."

    echo "sips -i $icon"
    sips -i "$icon" || fail "Failed in sips."
    echo "DeDeRez -only icns $icon > $rsrc"
    DeRez -only icns "$icon" > "$rsrc" || fail "Failed to DeRez."
    echo "SetFile -a C $iconDestination"
    SetFile -a C "$iconDestination" || fail "Failed to set icon flag."

    echo "touch $iconDestination/$'Icon\r'"
    touch "$iconDestination"/$'Icon\r' || fail "Failed to create directory's magic icon file."
    echo "Rez -append $rsrc -o $iconDestination/Icon?"
    Rez -append "$rsrc" -o "$iconDestination"/Icon? || fail "Failed to append icon to directory's magic icon file."
    echo "SetFile -a V $iconDestination/Icon?"
    SetFile -a V "$iconDestination"/Icon? || fail "Failed to set invisible flag for directory's magic icon file."

    rm "$rsrc" "$icon"

    AppPath=/$SPLUNK_HOME/bin/Splunk.app

    /usr/bin/open /$SPLUNK_HOME/bin/Splunk.app
    touch /tmp/postdone
   ;;
*)
        echo "complete"

   ;;
esac
