#!/bin/bash

#==============================================================================
#Change Log:
#
# When          Who             What
# ----          ---             ----
# 04.04.2012    J. Ritter       Created inital script
# 06.13.2012	M.Gurugunti	Added kdump,tdrelease,HWsupp
# 07.02.2012	J. Wu		Added lots of debug and error checking code
# 03.08.2013	J. Wu		Updated to support new site codes TX and MW
# 09.04.2013	J. Wu		Updated for new build to take care of zero
#				byte sciprts errors.
#
#==============================================================================

# Setup some global stuff
export INPLACE="ks.`date +%Y%m%d%H%M%S`"
export INSTDIR="/etc/tda"
export INSTLOG="${INSTDIR}/tda_install.log.`date +%Y%m%d-%H%M%S`"
export DEBUGLOG="${INSTDIR}/tda_install.log.debug.`date +%Y%m%d-%H%M%S`"
export LOCKDIR="${INSTDIR}/lock"

# Set columns in case not defined
if [ "x$COLUMNS" == "x" ]; then
    COLUMNS=80
fi

# Output a success
success() {
    echo -ne "\015\033[${COLUMNS}C\033[10D\033[1;32mdone\033[m\017" >&3
    echo >&3
}

# Output a failure
failed() {
    echo -ne "\015\033[${COLUMNS}C\033[10D\033[1;31mfailed\033[m\017" >&3
    echo >&3
}

# Create the log stuff
touch ${INSTLOG}
chmod 600 ${INSTLOG}

touch ${DEBUGLOG}
chmod 600 ${DEBUGLOG}

mkdir -p ${LOCKDIR}

echo -e "Welcome to TD AMERITRADE -= System Provisioning =- for `uname -r`\n"
echo -e "Hostname: `uname -n` is the process of being configured.\n"
echo -e "The system will reboot once the process is complete...\n"

# Output all sdout and sderr to log and keep the orig filehandles around
# so they can be used for outputting to the screen
exec 3>&1 4>&2
# Output everything else into the debug log
exec 1>>${DEBUGLOG} 2>&1

# Set verbose output
set -x 

. /etc/tda/env

## NOTE: The order of the scripts is very important
## Frist and formost you must configure the network
## Second, several things are keyed of TDA Release
## Third, update YUM to point to right repos or else you can't install pakages
## Fourth, update all packages before changing configs incase the rpm removes the config files
## All others will rely thsese 4 scripts 
## The LAST script must always be configure_PREAPP as it's the last step to prep a host for it's final role

CONFIG_SCRIPT_LIST=( configure_NETWORK configure_TDARELEASE configure_YUM configure_UPDATE configure_NTP configure_SSH configure_SYSCTL configure_PROFILE configure_SMTP configure_SYSLOG configure_USERS-GROUPS configure_PASSWD-AGING configure_CRON configure_CTRLALTDEL configure_CONSOLE configure_ADJUST-SERVICES configure_ROOT_KEY configure_ROOT_SUDOERS configure_ISV configure_CENTRIFY configure_KDUMP configure_HWSupp configure_GRUB configure_PREAPP )

# Run though each of the config scripts and create a lock file for each. 
# If the script exited correctly then remove the lock file
# Else leave the lock file and write out an error
for configScript in ${CONFIG_SCRIPT_LIST[@]}
do

  if [ ! -f /root/POST.${configScript} ] && [ ! -f /root/FAILED.${configScript} ] && [ ! -f /root/${configScript} ]; then
    echo -e "\n##### INFO: Start of ${configScript} #####\n" | tee -a ${INSTLOG}
    echo "##### INFO: RUNNING ${configScript} #####" >&3 2>&4
    wget http://${BUILDSERVER}/install/rhel6.2.x86_64/scripts/1.0/${configScript} -O /root/${configScript}
    touch ${LOCKDIR}/${configScript}.lock
    chmod 755 /root/${configScript}
    chown bin:bin /root/${configScript}
    
    # Check if the file is empty. This has hapened many times in the past
    if [ -s /root/${configScript} ] && [ -f /root/${configScript} ]; then
    	/root/${configScript} 2>&1 >> ${DEBUGLOG} 
    	if [ $? -eq 0 ]; then
	    echo -e "\n##### INFO: ${configScript} complete SUCESSFULLY #####\n\n" | tee -a ${INSTLOG}
	    rm -f ${LOCKDIR}/${configScript}.lock
	    mv /root/${configScript} /root/POST.${configScript}
	    success
    	else
	    echo -e "\n!!!!! ERROR: ${configScript} script FAILED !!!!!\n\n" | tee -a ${INSTLOG}
            mv /root/${configScript} /root/FAILED.${configScript}
	    failed
	fi
    else
	echo -e "\n!!!!! ERROR: ${configScript} did not download correctly  FAILED !!!!!\n\n" | tee -a ${INSTLOG}
        mv /root/${configScript} /root/ERROR.${configScript}
	failed
    fi
  fi

done

# Get the configure_MOTD script
wget http://${BUILDSERVER}/install/rhel6.2.x86_64/scripts/1.0/configure_MOTD -O /root/configure_MOTD
chmod 755 /root/configure_MOTD
chown bin:bin /root/configure_MOTD


# Run the DynamicOps Agent Script to tell DCAC about the build status
if [ -f /tmp/PaaS/rundcac.sh ]; then
    echo -e "\n##### INFO: FINISHING UP BY RUNNING DCAC#####\n" | tee -a ${INSTLOG}
    echo "##### INFO: FINISHING UP BY RUNNING DCAC #####" >&3 2>&4
    echo "Found /tmp/PaaS/rundcac.sh. Running DCAC Agent" | tee -a ${INSTLOG}
    chmod +x /tmp/PaaS/rundcac.sh 
    /tmp/PaaS/rundcac.sh | tee -a ${INSTLOG}
    if [ $? -eq 1 ]; then
	failed
    else
	success
    fi
fi


if [ -f /var/opt/BESClient/patchcatchup ]; then
  echo -e "\n\nWaiting for BES to install the latest baseline...\n\n" >> /etc/motd
  echo -e "\n\n##### INFO: WAITING FOR BES CATCH-UP #####\n\n" >> ${INSTLOG}
  echo -e "\n\n##### INFO: WAITING FOR BES CATCH-UP #####\n\n" >&3 2>&4

  cat > /etc/rc3.d/S01BESCleanup << _EOF
#!/bin/bash

# Cleanup from BigFix patching if it already occurred
if [ -f /var/opt/BESClient/patchcatchup ]; then
  rm -rf /var/opt/BESClient/patchcatchup
fi

# Remove this startup file when it runs on reboot
if [ -f /etc/rc3.d/S01BESCleanup ]; then
  rm -rf /etc/rc3.d/S01BESCleanup
fi

_EOF

  chmod 755 /etc/rc3.d/S01BESCleanup; chown bin:bin /etc/rc3.d/S01BESCleanup
  /sbin/service besclient start

else

  if [ -f /var/opt/BESClient/patch_done ]; then

    # Look for any lock files still around
    # If there are no lock files then the build finished sucessfully
    if [ ! "$(ls -A ${LOCKDIR})" ]; then
        mv /etc/motd /etc/motd.tmp
        /root/configure_MOTD 2>&1 >> ${INSTLOG}
        mv /root/configure_MOTD /root/POST.configure_MOTD
        rm -rf /etc/motd.tmp
        rmdir /etc/tda/lock
    else
        echo -e "\nThe following scripts have failed to execute properly, please review:\n\n" >> /etc/motd
        echo -e "`ls ${LOCKDIR}| grep lock| sed -e 's/\.lock//g'`\n\n" >> /etc/motd
        echo -e "Look in ${LOCKDIR} for a complete list of failed scripts\n" >> /etc/motd
        echo -e "Please check ${INSTLOG} for a summary of the kickstart post\n" >> /etc/motd
        echo -e "Please check ${DEBUGLOG} for detailed log of full failure details\n" >> /etc/motd
        echo -e "Please run /root/configure_MOTD once all failures have been resolved\n\n" >> /etc/motd
        echo -e "TDA Build Version: `cat /etc/tda-release`\nSystem Build Time: `date +%m/%d/%Y\ %H:%M`\n" >> /etc/motd
    fi

  fi

  mv /etc/rc3.d/S98configure_TDA /root/POST.configure_TDA
  /sbin/shutdown -r now
fi

