#!/bin/bash
# user_ | com2 Data Intelligence
# Check if Splunk is at current level:
SPLUNK_HOME=/opt/splunk
pkg=`rpm -q splunk`
version=`echo ${pkg} |awk -F"-" '{print $2}'`
date_=`date '+%Y%m%d'`
bold_yellow="\e[1m\e[33m"
reset_color="\e[0m"
RAM=`grep MemT /proc/meminfo|awk '{$2/=1048576;printf "%.2fG\n",$2}'`


# Is Splunk running as a service account or root/splunk?
cd /opt/splunk  && {
  pre_uid=`ls -ld etc|awk '{print $3}'`
  pre_gid=`ls -ld etc|awk '{print $4}'`
  }

echo "pre_uid=$pre_uid  pre_gid=$pre_gid"

usage ()
{
  cat<<END

  Usage: $0 [ -v version_number ]

  Where: -v version to upgrade

END
  exit 1
}

unmount_mnt ()
{
  # Unmount more than 1 /mnt
  for mount_point in `mount|grep nfs|grep '/mnt'|awk '{print $3}'`
  do
    echo "umount -l $mount_point"
    umount -l $mount_point
  done
}

create_Splunkd_service ()
{
  {
     # NOTE: Splunkd.service changed on version 9.0.7
     cat<<END
#This unit file replaces the traditional start-up script for systemd
#configurations, and is used when enabling boot-start for Splunk on
#systemd-based Linux distributions.

[Unit]
Description=Systemd service file for Splunk, generated by 'splunk enable boot-start'
After=network-online.target
Wants=network-online.target

[Service]
Type=simple
Restart=always
ExecStart=/opt/splunk/bin/splunk _internal_launch_under_systemd
KillMode=mixed
KillSignal=SIGINT
TimeoutStopSec=360
LimitNOFILE=262144
LimitNPROC=131072
LimitRTPRIO=99
SuccessExitStatus=51 52
RestartPreventExitStatus=51
RestartForceExitStatus=52
User=${pre_uid}
Group=${pre_gid}
Delegate=true
CPUShares=1024
MemoryLimit=${RAM}
PermissionsStartOnly=true
StartLimitInterval=30
StartLimitBurst=5
RestartSec=10
ExecStartPost=-/bin/bash -c "chown -R ${pre_uid}:${pre_gid} /sys/fs/cgroup/cpu/system.slice/%n"
ExecStartPost=-/bin/bash -c "chown -R ${pre_uid}:${pre_gid} /sys/fs/cgroup/memory/system.slice/%n"

[Install]
WantedBy=multi-user.target

END
  } > /etc/systemd/system/Splunkd.service
}

convert_to_service_account ()
{
  # Convert splunk to service account
  echo "Convert /opt/splunk to service account: ${pre_uid}:${pre_gid}"

  echo "Changing to ${pre_uid}:${pre_gid} /opt/splunk"
  [ -d /opt/splunk ] && \
  cd /opt && chown -R ${pre_uid}:${pre_gid} splunk

  # Remove local splunk entry.
  echo "Removing splunk local entry in /etc/passwd /etc/group /etc/shadow /etc/gshadow"
  sed -i '/^splunk/d' /etc/passwd /etc/group /etc/shadow /etc/gshadow

  chmod 500 /opt/splunk/bin/splunk
  chmod u+s /opt/splunk/bin/splunk  
  echo "Verifying /opt/splunk/bin/splunk"
  ls -l /opt/splunk/bin/splunk
}

check_splunk_process ()
{
    ps aux|grep [s]plunk >/dev/null
    status=$?
    [[ "$status" != "0" ]] && {
      echo "Splunk is still UP. Upgrade to Splunk version ${ver} Aborted."
      ps aux|grep [s]plunk
      exit 2
    }
}

stop_splunk_process ()
{
# Is it systemd or systemV init?
  if [[ -f /etc/systemd/system/Splunkd.service ]]
  then
     systemctl stop Splunkd
  else
     if [[ -f /etc/init.d/splunk ]]
     then
        service splunk stop
     fi
  fi
  # Verify
  pgrep -u ${pre_uid} splunkd >/dev/null 2>&1
  [[ "$?" = "0" ]] && pgrep -u ${pre_uid} splunkd | xargs kill -9
  pgrep -u ${pre_uid} mongod >/dev/null 2>&1
  [[ "$?" = "0" ]] && pgrep -u ${pre_uid} mongod | xargs kill -9
}

##########
# M A I N
##########
if [[ ! $1 ]]
then
  echo -n "Enter Splunk version (ie, 9.0.7) to upgrade? "
  read ver
else
   while [[ $# -gt 0 ]]
   do
     case $1 in
        -v ) ver=$2
             shift
             ;;
      -*|* )
             usage
             ;;
     esac
     shift
   done
fi

[[ -z ${ver} ]] && usage

{

if [[ "${version}" != "${ver}" ]]
then
  # Stop splunk
  echo -e "${bold_yellow}1. Stopping splunkd.${reset_color}"
  stop_splunk_process
  
  splunk_status=`show_splunk|awk '/SPLUNK/{print $NF}'`
  echo splunk_status=$splunk_status
  if [[ "${splunk_status}" = "UP" ]]
  then
     echo "Splunk is still running. Try to stop Splunk again"
     stop_splunk_process
  fi

  echo "Sleep for 3 seconds then check splunk process again."
  sleep 3
  status=`show_splunk|awk '/SPLUNK/{print $NF}'`
  if [[ "${status}" = "DOWN" ]]
  then
    check_splunk_process
    echo "#########################################"
    echo -e "${bold_yellow}2. Backing up ${SPLUNK_HOME}/etc.${reset_color}"
    echo "Backing up current Splunk ${version} to ${SPLUNK_HOME}/etc-splunk-${version}.tar.gz"
    cd ${SPLUNK_HOME} && tar czpf etc-splunk-${version}.tar.gz etc/
    echo
    echo "BACKUP COMPLETED: ${SPLUNK_HOME}/etc-splunk-${version}.tar.gz"
    ls -l ${SPLUNK_HOME}/etc-splunk-${version}.tar.gz
    echo
    echo "#########################################"
  else
    check_splunk_process
  fi

  # Verifying backup 
  [[ ! -s ${SPLUNK_HOME}/etc-splunk-${version}.tar.gz ]] && {
    echo "Backup file ${SPLUNK_HOME}/etc-splunk-${version}.tar.gz does not exist."
    echo "Upgrade splunk to ${ver} abort."
    exit 3
  }

  # On splunk 9.x Splunkd.service changed.
  # https://docs.splunk.com/Documentation/Splunk/9.0.7/Admin/RunSplunkassystemdservice
  # Backup current Splunkd.service to /tmp
  echo -e "${bold_yellow}3. Backing up current Splunkd.service to /var/tmp/Splunkd.service_${version}${reset_color}"
  cd /etc/systemd/system && \
     [[ -f Splunkd.service ]] && cp -f Splunkd.service /var/tmp/Splunkd.service_${version}
        
  # Clean up earlier Splunkd.service_${version}
  echo -e "${bold_yellow}4. Cleaning up earlier Splunkd.service version ${version}${reset_color}"
  # Since splunk's running as service account, line below wont work
  # ${SPLUNK_HOME}/bin/splunk disable boot-start
  # Instead,
  systemctl disable Splunkd && rm -f /etc/systemd/system/Splunkd.service

  ## Upgrade Splunk
  unmount_mnt
  mount share_server.devdomain1:/infra/loc /mnt
  [[ "$?" = "0" ]] && {
     echo -e "${bold_yellow}5. Upgrading splunk to version ${ver} ${reset_color}"
     echo
     cd /mnt/Splunk/${ver} && {
       splunk_rpm=`ls -f splunk-${ver}*.rpm 2>/dev/null`
       [[ -z ${splunk_rpm} ]] && {
          echo "/mnt/Splunk/${ver}, package does not exist. Abort"
          exit 3
       }

       rpm -Uvh ${splunk_rpm}

       ## Once upgraded, check splunk's uid. If service account, convert
       cd /opt/splunk/bin  && post_uid=`ls -ld splunkd|awk '{print $3}'`

       [[ "${post_uid}" != "${pre_uid}" ]]  && convert_to_service_account


       # Create new Splunkd.service
       echo -e "${bold_yellow}6. Creating Splunkd.service version ${ver}${reset_color}"
       echo "Enable splunkd@boot"
       #${SPLUNK_HOME}/bin/splunk enable boot-start -systemd-managed 1 -user ${pre_uid} -group ${pre_gid}
       # The above line wont work
       # Instead, creating new Splunkd.service
       create_Splunkd_service

       echo
       ## Start Splunk....
       echo -e "${bold_yellow}7. Starting splunkd as ${pre_uid}:${pre_gid}${reset_color}"
       if [[ "${pre_uid}" = "svc_act1" ]] || [[ "${pre_uid}" = "svc_act2" ]]
       then
          echo "Running su - ${pre_uid} -c '/opt/splunk/bin/splunk start --answer-yes --no-prompt --accept-license'"
          su - ${pre_uid} -c '/opt/splunk/bin/splunk start --answer-yes --no-prompt --accept-license'
       else
          echo "Running /opt/splunk/bin/splunk start --answer-yes --no-prompt --accept-license"
          /opt/splunk/bin/splunk start --answer-yes --no-prompt --accept-license
       fi

       ## Make sure Splunk is NOT up....
       echo -e "${bold_yellow}8. Stopping splunkd.${reset_color}"
       stop_splunk_process
       show_splunk -s
       # Enable Splunkd@boot
       echo
       echo -e "${bold_yellow}9. Enable Splunkd@boot.${reset_color}"
       systemctl enable Splunkd.service
     }
  }
else
  echo -e "Current splunk version: ${bold_yellow}${pkg}${reset_color}"
fi
echo -e "SPLUNK_UPGRADE_COMPLETED: ${bold_yellow}`rpm -q splunk`${reset_color}"
} | tee /root/`basename $0`.${date_}.OUT
