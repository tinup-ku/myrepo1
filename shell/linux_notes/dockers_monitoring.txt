John,

Siva and Tejas are from EMS group and should be able to help you define monitoring of this hyperscience container applications

Here is Log file monitoring information for standalone Docker:

Log File Monitoring:
1)	Watch /var/log/messages or /var/log/journal/<machine-id>/*.journal  or /run/log/journal/<machine-id>/*.journal
?	I have reviewed above log files but I see only messages related to dockerd but not application containers
2)	Watch /app/docker/containers/<container-id>/*-json.log files
Each running container dumps stdout to above log files, I reviewed couple of files but all have messages from running application at INFO level, so I was not able to find any pathological symptoms.
If application running inside container can send also error messages then these files can be monitored for application error
?	Note: container id can change if containers is started from scratch after removing stopped container

I would recommend that at least do following three to make sure your respective application is running in containers and their system resource metrics.

1)  The Docker container
 Check container is up and running

# docker ps --format '{{.Names}} {{.Status}}'
hsvarbe_field_locator_1 Up 6 days
hsvarbe_segmentation_1 Up 6 days
hsfe_gunicorn_1 Up 6 days
hsfe_nginx_1 Up 6 days
hsbe_shell_command_1 Up 6 days
hsbe_cron_1 Up 6 days
hsbe_vpc_1 Up 6 days
hsbe_slow_funcall_1 Up 6 days
hsbe_forms_oicr_1 Up 6 days
hsbe_registration_1 Up 6 days
hsbe_funcall_1 Up 6 days
hsbe_cs_1 Up 6 days
hsout_notify_1 Up 6 days
hsfolderin_folder_listener_1 Up 6 days
hsdb_forms_db_1 Up 6 days


2) Container Resource Usage Metrics.

# docker stats --no-stream
CONTAINER           CPU %               MEM USAGE / LIMIT     MEM %               NET I/O             BLOCK I/O           PIDS
825c6625fdb3        0.00%               260.9MiB / 31.26GiB   0.82%               0B / 0B             71.9MB / 8.19kB     10
c39d78937a4f        0.00%               512.4MiB / 31.26GiB   1.60%               0B / 0B             409MB / 8.19kB      30
ca1ad1ac7cb8        0.02%               1.713GiB / 31.26GiB   5.48%               0B / 0B             55.7MB / 8.19kB     10
aebc5f7fda8f        0.00%               61.71MiB / 31.26GiB   0.19%               0B / 0B             92.2MB / 8.19kB     11
6d17a2149d34        0.00%               256.3MiB / 31.26GiB   0.80%               0B / 0B             83MB / 8.19kB       10
54a516b6050b        0.00%               222.5MiB / 31.26GiB   0.70%               0B / 0B             63.2MB / 8.19kB     3
da6ce48a824d        0.00%               416.4MiB / 31.26GiB   1.30%               0B / 0B             176MB / 8.19kB      15
1332f7826b1e        0.00%               260.8MiB / 31.26GiB   0.81%               0B / 0B             62.5MB / 8.19kB     10
8a08db486256        0.00%               699.7MiB / 31.26GiB   2.19%               0B / 0B             619MB / 8.19kB      26
b6152e332e33        0.00%               262.1MiB / 31.26GiB   0.82%               0B / 0B             53.4MB / 8.19kB     10
0043aa24ff4e        0.00%               258.1MiB / 31.26GiB   0.81%               0B / 0B             81.4MB / 8.19kB     10
723a8e4961e7        0.00%               256.6MiB / 31.26GiB   0.80%               0B / 0B             53.7MB / 8.19kB     10
7339ca7c79b3        0.00%               218.5MiB / 31.26GiB   0.68%               0B / 0B             81.1MB / 8.19kB     3
836c8fd3bcfe        0.00%               213.6MiB / 31.26GiB   0.67%               0B / 0B             114MB / 8.19kB      2
00c2f40a24c0        0.00%               103.9MiB / 31.26GiB   0.32%               0B / 0B             255MB / 1.63GB      80

3) Log File Monitoring:

Watch /app/docker/containers/<container-id>/*-json.log files for any error or critical level messages



_____________________________________________
From: Shah, Raj 
Sent: Friday, February 15, 2019 1:15 PM
To: Nicolucci, John M; Wadhwa, Pavan
Cc: Ritter, Joshua P
Subject: RE: Docker Monitoring Info


John,
We can monitor standalone docker/container implementation at four layers, I will continue this email thread by including EMS group in next email.
Pavan,
Please look in to item#4 and let us know if AppDynamics can help.

Here are the four layers:

1)	The Docker daemon
Monitor the process for “dockerd”, “docker-containerd” and “docker-containerd-shim”

# systemctl is-active docker
active
or
#systemctl status docker | grep "Active: "
   Active: active (running) since Tue 2019-01-29 10:56:25 CST; 1 weeks 2 days ago
# ps -ef | grep "[d]ockerd "
root     27511     1  0 Jan29 ?        00:15:12 /usr/bin/dockerd -g /app/docker
or  
#pidof dokerd     
#echo $?
0 if preset or 1 if not present 

2)  The Docker container
2.1) container is up and running

# docker ps --format '{{.Names}} {{.Status}}'
hsvarbe_field_locator_1 Up 6 days
hsvarbe_segmentation_1 Up 6 days
hsfe_gunicorn_1 Up 6 days
hsfe_nginx_1 Up 6 days
hsbe_shell_command_1 Up 6 days
hsbe_cron_1 Up 6 days
hsbe_vpc_1 Up 6 days
hsbe_slow_funcall_1 Up 6 days
hsbe_forms_oicr_1 Up 6 days
hsbe_registration_1 Up 6 days
hsbe_funcall_1 Up 6 days
hsbe_cs_1 Up 6 days
hsout_notify_1 Up 6 days
hsfolderin_folder_listener_1 Up 6 days
hsdb_forms_db_1 Up 6 days


3) Container Resource Usage Metrics.

# docker stats --no-stream
CONTAINER           CPU %               MEM USAGE / LIMIT     MEM %               NET I/O             BLOCK I/O           PIDS
825c6625fdb3        0.00%               260.9MiB / 31.26GiB   0.82%               0B / 0B             71.9MB / 8.19kB     10
c39d78937a4f        0.00%               512.4MiB / 31.26GiB   1.60%               0B / 0B             409MB / 8.19kB      30
ca1ad1ac7cb8        0.02%               1.713GiB / 31.26GiB   5.48%               0B / 0B             55.7MB / 8.19kB     10
aebc5f7fda8f        0.00%               61.71MiB / 31.26GiB   0.19%               0B / 0B             92.2MB / 8.19kB     11
6d17a2149d34        0.00%               256.3MiB / 31.26GiB   0.80%               0B / 0B             83MB / 8.19kB       10
54a516b6050b        0.00%               222.5MiB / 31.26GiB   0.70%               0B / 0B             63.2MB / 8.19kB     3
da6ce48a824d        0.00%               416.4MiB / 31.26GiB   1.30%               0B / 0B             176MB / 8.19kB      15
1332f7826b1e        0.00%               260.8MiB / 31.26GiB   0.81%               0B / 0B             62.5MB / 8.19kB     10
8a08db486256        0.00%               699.7MiB / 31.26GiB   2.19%               0B / 0B             619MB / 8.19kB      26
b6152e332e33        0.00%               262.1MiB / 31.26GiB   0.82%               0B / 0B             53.4MB / 8.19kB     10
0043aa24ff4e        0.00%               258.1MiB / 31.26GiB   0.81%               0B / 0B             81.4MB / 8.19kB     10
723a8e4961e7        0.00%               256.6MiB / 31.26GiB   0.80%               0B / 0B             53.7MB / 8.19kB     10
7339ca7c79b3        0.00%               218.5MiB / 31.26GiB   0.68%               0B / 0B             81.1MB / 8.19kB     3
836c8fd3bcfe        0.00%               213.6MiB / 31.26GiB   0.67%               0B / 0B             114MB / 8.19kB      2
00c2f40a24c0        0.00%               103.9MiB / 31.26GiB   0.32%               0B / 0B             255MB / 1.63GB      80


4) Application functionality check.

Write custom probes to check functionality of services running in container and integrate with existing monitoring infrastructure.

for example: query the service.

Regards,
Raj Shah
